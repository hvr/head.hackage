diff -ru conduit-1.2.12.1.orig/conduit.cabal conduit-1.2.12.1/conduit.cabal
--- conduit-1.2.12.1.orig/conduit.cabal	2018-01-06 17:22:28.828784258 -0500
+++ conduit-1.2.12.1/conduit.cabal	2018-01-06 17:26:05.524789715 -0500
@@ -37,6 +37,7 @@
                      , resourcet                >= 1.1          && < 1.2
                      , exceptions               >= 0.6
                      , lifted-base              >= 0.1
+                     , semigroups               >= 0.16
                      , transformers-base        >= 0.4.1        && < 0.5
                      , transformers             >= 0.2.2
                      , transformers-compat      >= 0.3
@@ -60,6 +61,7 @@
                    , base
                    , hspec >= 1.3
                    , QuickCheck >= 2.7
+                   , semigroups >= 0.16
                    , transformers
                    , mtl
                    , resourcet
diff -ru conduit-1.2.12.1.orig/Data/Conduit/Internal/Conduit.hs conduit-1.2.12.1/Data/Conduit/Internal/Conduit.hs
--- conduit-1.2.12.1.orig/Data/Conduit/Internal/Conduit.hs	2017-09-25 03:19:47.000000000 -0400
+++ conduit-1.2.12.1/Data/Conduit/Internal/Conduit.hs	2018-01-06 17:27:20.360791600 -0500
@@ -102,6 +102,7 @@
 import Control.Monad.Primitive (PrimMonad, PrimState, primitive)
 import Data.Void (Void, absurd)
 import Data.Monoid (Monoid (mappend, mempty))
+import Data.Semigroup (Semigroup ((<>)))
 import Control.Monad.Trans.Resource
 import qualified Data.IORef as I
 import Control.Monad.Morph (MFunctor (..))
@@ -251,11 +252,17 @@
     liftResourceT = lift . liftResourceT
     {-# INLINE liftResourceT #-}
 
+instance Monad m => Semigroup (ConduitM i o m ()) where
+    (<>) = (>>)
+    {-# INLINE (<>) #-}
+
 instance Monad m => Monoid (ConduitM i o m ()) where
     mempty = return ()
     {-# INLINE mempty #-}
-    mappend = (>>)
+#if !(MIN_VERSION_base(4,11,0))
+    mappend = (<>)
     {-# INLINE mappend #-}
+#endif
 
 instance PrimMonad m => PrimMonad (ConduitM i o m) where
   type PrimState (ConduitM i o m) = PrimState m
diff -ru conduit-1.2.12.1.orig/Data/Conduit/Internal/Pipe.hs conduit-1.2.12.1/Data/Conduit/Internal/Pipe.hs
--- conduit-1.2.12.1.orig/Data/Conduit/Internal/Pipe.hs	2017-04-19 09:32:04.000000000 -0400
+++ conduit-1.2.12.1/Data/Conduit/Internal/Pipe.hs	2018-01-06 17:28:42.592793670 -0500
@@ -59,6 +59,7 @@
 import Control.Monad.Primitive (PrimMonad, PrimState, primitive)
 import Data.Void (Void, absurd)
 import Data.Monoid (Monoid (mappend, mempty))
+import Data.Semigroup (Semigroup ((<>)))
 import Control.Monad.Trans.Resource
 import qualified GHC.Exts
 import Control.Monad.Morph (MFunctor (..))
@@ -151,11 +152,17 @@
         go (HaveOutput p c o) = HaveOutput (go p) c o
     {-# INLINE catch #-}
 
+instance Monad m => Semigroup (Pipe l i o u m ()) where
+    (<>) = (>>)
+    {-# INLINE (<>) #-}
+
 instance Monad m => Monoid (Pipe l i o u m ()) where
     mempty = return ()
     {-# INLINE mempty #-}
-    mappend = (>>)
+#if !(MIN_VERSION_base(4,11,0))
+    mappend = (<>)
     {-# INLINE mappend #-}
+#endif
 
 instance PrimMonad m => PrimMonad (Pipe l i o u m) where
   type PrimState (Pipe l i o u m) = PrimState m
Only in conduit-1.2.12.1: .ghc.environment.x86_64-linux-8.4.0.20171222
diff -ru conduit-1.2.12.1.orig/test/Data/Conduit/StreamSpec.hs conduit-1.2.12.1/test/Data/Conduit/StreamSpec.hs
--- conduit-1.2.12.1.orig/test/Data/Conduit/StreamSpec.hs	2015-11-08 21:09:15.000000000 -0500
+++ conduit-1.2.12.1/test/Data/Conduit/StreamSpec.hs	2018-01-06 17:30:27.112796303 -0500
@@ -19,6 +19,7 @@
 import qualified Data.List
 import qualified Data.Maybe
 import           Data.Monoid (Monoid(..))
+import           Data.Semigroup (Semigroup(..))
 import           Prelude
     ((.), ($), (>>=), (=<<), return, (==), Int, id, Maybe(..), Monad,
      Eq, Show, String, Functor, fst, snd)
@@ -502,9 +503,14 @@
 newtype Sum a = Sum a
   deriving (Eq, Show, Arbitrary)
 
+instance Prelude.Num a => Semigroup (Sum a) where
+  Sum x <> Sum y = Sum $ x Prelude.+ y
+
 instance Prelude.Num a => Monoid (Sum a) where
   mempty = Sum 0
-  mappend (Sum x) (Sum y) = Sum $ x Prelude.+ y
+#if !(MIN_VERSION_base(4,11,0))
+  mappend = (<>)
+#endif
 
 preventFusion :: a -> a
 preventFusion = id
