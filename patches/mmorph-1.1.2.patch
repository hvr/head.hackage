commit 581601be7e348880ff44788c0b618165790ca7f8
Author: Ryan Scott <ryan.gl.scott@gmail.com>
Date:   Fri Mar 15 08:58:52 2019 -0400

    Adapt to base-4.13.0.0

diff --git a/src/Control/Monad/Trans/Compose.hs b/src/Control/Monad/Trans/Compose.hs
index 3ca2ebf..263dd1d 100644
--- a/src/Control/Monad/Trans/Compose.hs
+++ b/src/Control/Monad/Trans/Compose.hs
@@ -1,3 +1,4 @@
+{-# LANGUAGE CPP #-}
 {-# LANGUAGE FlexibleContexts #-}
 {-# LANGUAGE FlexibleInstances #-}
 {-# LANGUAGE KindSignatures #-}
@@ -19,6 +20,7 @@ import Control.Applicative (
 import Control.Monad (MonadPlus(mzero, mplus), liftM)
 import Control.Monad.Cont.Class (MonadCont(callCC))
 import Control.Monad.Error.Class (MonadError(throwError, catchError))
+import qualified Control.Monad.Fail as Fail
 import Control.Monad.Morph (MFunctor(hoist))
 import Control.Monad.RWS.Class (MonadRWS)
 import Control.Monad.Reader.Class (MonadReader(ask, local, reader))
@@ -57,7 +59,12 @@ instance Alternative (f (g m)) => Alternative (ComposeT f g m) where
 instance Monad (f (g m)) => Monad (ComposeT f g m) where
     return a = ComposeT (return a)
     m >>= f  = ComposeT (getComposeT m >>= \x -> getComposeT (f x))
+#if !(MIN_VERSION_base(4,13,0))
     fail e   = ComposeT (fail e)
+#endif
+
+instance Fail.MonadFail (f (g m)) => Fail.MonadFail (ComposeT f g m) where
+    fail e   = ComposeT (Fail.fail e)
 
 instance MonadPlus (f (g m)) => MonadPlus (ComposeT f g m) where
     mzero = ComposeT mzero
