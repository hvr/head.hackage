diff --git a/hashtables.cabal b/hashtables.cabal
index 42a4da7..f7e22e0 100644
--- a/hashtables.cabal
+++ b/hashtables.cabal
@@ -174,6 +174,7 @@ Library
 
   Build-depends:     base      >= 4.7 && <5,
                      hashable  >= 1.1 && <1.2 || >= 1.2.1 && <1.3,
+                     semigroups >= 0.18 && <0.19,
                      primitive,
                      vector    >= 0.7 && <0.13
 
diff --git a/src/Data/HashTable/ST/Basic.hs b/src/Data/HashTable/ST/Basic.hs
index 7b3983c..8fba2d1 100644
--- a/src/Data/HashTable/ST/Basic.hs
+++ b/src/Data/HashTable/ST/Basic.hs
@@ -103,6 +103,7 @@ import           Data.Hashable                     (Hashable)
 import qualified Data.Hashable                     as H
 import           Data.Maybe
 import           Data.Monoid
+import           Data.Semigroup
 import qualified Data.Primitive.ByteArray          as A
 import           Data.STRef
 import           GHC.Exts
@@ -488,12 +489,14 @@ newtype Slot = Slot { _slot :: Int } deriving (Show)
 
 
 ------------------------------------------------------------------------------
-instance Monoid Slot where
-    mempty = Slot maxBound
-    (Slot x1) `mappend` (Slot x2) =
+instance Semigroup Slot where
+    Slot x1 <> Slot x2 =
         let !m = mask x1 maxBound
         in Slot $! (complement m .&. x1) .|. (m .&. x2)
 
+instance Monoid Slot where
+    mempty = Slot maxBound
+    mappend = (<>)
 
 ------------------------------------------------------------------------------
 -- findSafeSlots return type
