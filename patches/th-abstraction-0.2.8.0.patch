commit cf72cb2a371b25e27a3cc4140a8ef68fb1eef760
Author: Ryan Scott <ryan.gl.scott@gmail.com>
Date:   Sat Oct 27 20:37:45 2018 -0400

    Allow building with template-haskell-2.15.0.0

diff --git a/src/Language/Haskell/TH/Datatype.hs b/src/Language/Haskell/TH/Datatype.hs
index 3201f11..ea46019 100644
--- a/src/Language/Haskell/TH/Datatype.hs
+++ b/src/Language/Haskell/TH/Datatype.hs
@@ -520,7 +520,15 @@ repairDataFam
     DataInstD cx n (repairVarKindsWith' dvars ts) cons deriv
 #else
 repairDataFam famD instD
-# if MIN_VERSION_template_haskell(2,11,0)
+# if MIN_VERSION_template_haskell(2,15,0)
+      | DataFamilyD _ dvars _ <- famD
+      , NewtypeInstD cx n tvbs ts k c deriv <- instD
+      = NewtypeInstD cx n tvbs (repairVarKindsWith dvars ts) k c deriv
+
+      | DataFamilyD _ dvars _ <- famD
+      , DataInstD cx n tvbs ts k c deriv <- instD
+      = DataInstD cx n tvbs (repairVarKindsWith dvars ts) k c deriv
+# elif MIN_VERSION_template_haskell(2,11,0)
       | DataFamilyD _ dvars _ <- famD
       , NewtypeInstD cx n ts k c deriv <- instD
       = NewtypeInstD cx n (repairVarKindsWith dvars ts) k c deriv
@@ -576,10 +584,18 @@ normalizeDecFor isReified dec =
       giveTypesStarKinds <$> normalizeDec' isReified context name (bndrParams tyvars) [con] Newtype
     DataD context name tyvars _kind cons _derives ->
       giveTypesStarKinds <$> normalizeDec' isReified context name (bndrParams tyvars) cons Datatype
-    NewtypeInstD context name params _kind con _derives ->
+    NewtypeInstD context name
+# if MIN_VERSION_template_haskell(2,15,0)
+                 _
+# endif
+                 params _kind con _derives ->
       repair13618' . giveTypesStarKinds =<<
       normalizeDec' isReified context name params [con] NewtypeInstance
-    DataInstD context name params _kind cons _derives ->
+    DataInstD context name
+# if MIN_VERSION_template_haskell(2,15,0)
+               _
+# endif
+              params _kind cons _derives ->
       repair13618' . giveTypesStarKinds =<<
       normalizeDec' isReified context name params cons DataInstance
 #elif MIN_VERSION_template_haskell(2,11,0)
@@ -1635,7 +1651,11 @@ tySynInstDCompat ::
   TypeQ   {- ^ instance result     -} ->
   DecQ
 #if MIN_VERSION_template_haskell(2,9,0)
-tySynInstDCompat n ps r = TySynInstD n <$> (TySynEqn <$> sequence ps <*> r)
+tySynInstDCompat n ps r = TySynInstD n <$> (TySynEqn
+# if MIN_VERSION_template_haskell(2,15,0)
+                                              Nothing
+# endif
+                                              <$> sequence ps <*> r)
 #else
 tySynInstDCompat = tySynInstD
 #endif

commit 5123c6d054d0949cb444590269f13e5d44699ab2
Author: Ryan Scott <ryan.gl.scott@gmail.com>
Date:   Sat Oct 27 20:32:49 2018 -0400

    Fix #56 (#57)

diff --git a/ChangeLog.md b/ChangeLog.md
index d5918a1..80d0422 100644
--- a/ChangeLog.md
+++ b/ChangeLog.md
@@ -1,5 +1,8 @@
 # Revision history for th-abstraction
 
+## next -- ????-??-??
+* Fix a bug in which `asEqualPred` would return incorrect results with GHC 8.7.
+
 ## 0.2.8.0 -- 2018-06-29
 * GADT reification is now much more robust with respect to `PolyKinds`:
   * A bug in which universally quantified kind variables were mistakenly
diff --git a/src/Language/Haskell/TH/Datatype/Internal.hs b/src/Language/Haskell/TH/Datatype/Internal.hs
index 64ba0c0..3752310 100644
--- a/src/Language/Haskell/TH/Datatype/Internal.hs
+++ b/src/Language/Haskell/TH/Datatype/Internal.hs
@@ -15,7 +15,9 @@ module Language.Haskell.TH.Datatype.Internal where
 import Language.Haskell.TH.Syntax
 
 eqTypeName :: Name
-#if MIN_VERSION_base(4,9,0)
+#if MIN_VERSION_base(4,9,0) && __GLASGOW_HASKELL__ < 807
+  -- TODO: Replace __GLASGOW_HASKELL__ < 807 with
+  -- !(MIN_VERSION_base(4,13,0)) once base-4.13 exists
 eqTypeName = mkNameG_tc "base" "Data.Type.Equality" "~"
 #else
 eqTypeName = mkNameG_tc "ghc-prim" "GHC.Types" "~"
