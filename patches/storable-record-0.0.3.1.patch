diff -ru storable-record-0.0.3.1.orig/src/Foreign/Storable/Record.hs storable-record-0.0.3.1/src/Foreign/Storable/Record.hs
--- storable-record-0.0.3.1.orig/src/Foreign/Storable/Record.hs	2016-01-10 05:55:14.000000000 -0500
+++ storable-record-0.0.3.1/src/Foreign/Storable/Record.hs	2018-01-24 12:01:37.039464692 -0500
@@ -1,3 +1,4 @@
+{-# LANGUAGE CPP #-}
 {- |
 Here we show an example of how to
 define a Storable instance with this module.
@@ -70,6 +71,9 @@
 import Control.Applicative (Applicative(pure, (<*>)), )
 import Data.Functor.Compose (Compose(Compose), )
 import Data.Monoid (Monoid(mempty, mappend), )
+#if MIN_VERSION_base(4,9,0) && !(MIN_VERSION_base(4,11,0))
+import Data.Semigroup (Semigroup(..))
+#endif
 
 import Foreign.Storable.FixedArray (roundUp, )
 import qualified Foreign.Storable as St
@@ -130,6 +134,12 @@
 
 newtype Alignment = Alignment {deconsAlignment :: Int}
 
+#if MIN_VERSION_base(4,9,0)
+instance Semigroup Alignment where
+   {-# INLINE (<>) #-}
+   Alignment x <> Alignment y = Alignment (lcm x y)
+#endif
+
 instance Monoid Alignment where
    {-# INLINE mempty #-}
    {-# INLINE mappend #-}
diff -ru storable-record-0.0.3.1.orig/src/Foreign/Storable/RecordMinimalSize.hs storable-record-0.0.3.1/src/Foreign/Storable/RecordMinimalSize.hs
--- storable-record-0.0.3.1.orig/src/Foreign/Storable/RecordMinimalSize.hs	2016-01-10 05:55:14.000000000 -0500
+++ storable-record-0.0.3.1/src/Foreign/Storable/RecordMinimalSize.hs	2018-01-24 12:02:41.931466327 -0500
@@ -1,3 +1,4 @@
+{-# LANGUAGE CPP #-}
 {- |
 Here we show an example of how to
 define a Storable instance with this module.
@@ -73,6 +74,9 @@
 import Control.Applicative (Applicative(pure, (<*>)), )
 import Data.Functor.Compose (Compose(Compose), )
 import Data.Monoid (Monoid(mempty, mappend), )
+#if MIN_VERSION_base(4,9,0) && !(MIN_VERSION_base(4,11,0))
+import Data.Semigroup (Semigroup(..))
+#endif
 
 import Foreign.Storable.FixedArray (roundUp, )
 import qualified Foreign.Storable as St
@@ -127,6 +131,12 @@
 
 newtype Alignment = Alignment Int
 
+#if MIN_VERSION_base(4,9,0)
+instance Semigroup Alignment where
+   {-# INLINE (<>) #-}
+   Alignment x <> Alignment y = Alignment (lcm x y)
+#endif
+
 instance Monoid Alignment where
    {-# INLINE mempty #-}
    {-# INLINE mappend #-}
diff -ru storable-record-0.0.3.1.orig/src/Foreign/Storable/RecordReaderPtr.hs storable-record-0.0.3.1/src/Foreign/Storable/RecordReaderPtr.hs
--- storable-record-0.0.3.1.orig/src/Foreign/Storable/RecordReaderPtr.hs	2016-01-10 05:55:14.000000000 -0500
+++ storable-record-0.0.3.1/src/Foreign/Storable/RecordReaderPtr.hs	2018-01-24 12:03:35.347467672 -0500
@@ -1,3 +1,4 @@
+{-# LANGUAGE CPP #-}
 {- |
 Here we show an example of how to
 define a Storable instance with this module.
@@ -73,6 +74,9 @@
 import Control.Applicative (Applicative(pure, (<*>)), )
 import Data.Functor.Compose (Compose(Compose), )
 import Data.Monoid (Monoid(mempty, mappend), )
+#if MIN_VERSION_base(4,9,0) && !(MIN_VERSION_base(4,11,0))
+import Data.Semigroup (Semigroup(..))
+#endif
 
 import Foreign.Storable.FixedArray (roundUp, )
 import qualified Foreign.Storable as St
@@ -127,6 +131,12 @@
 
 newtype Alignment = Alignment {deconsAlignment :: Int}
 
+#if MIN_VERSION_base(4,9,0)
+instance Semigroup Alignment where
+   {-# INLINE (<>) #-}
+   Alignment x <> Alignment y = Alignment (lcm x y)
+#endif
+
 instance Monoid Alignment where
    {-# INLINE mempty #-}
    {-# INLINE mappend #-}
