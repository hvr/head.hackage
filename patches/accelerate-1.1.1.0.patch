diff -ru accelerate-1.1.1.0.orig/Data/Array/Accelerate/Classes/FromIntegral.hs accelerate-1.1.1.0/Data/Array/Accelerate/Classes/FromIntegral.hs
--- accelerate-1.1.1.0.orig/Data/Array/Accelerate/Classes/FromIntegral.hs	2017-09-20 23:08:58.000000000 -0400
+++ accelerate-1.1.1.0/Data/Array/Accelerate/Classes/FromIntegral.hs	2018-01-23 13:08:52.889390481 -0500
@@ -61,10 +61,16 @@
           TyConI (DataD _ _ _ _ cons _) <- reify name
 #endif
           let
+            -- This is what a constructor such as IntegralNumType will be reified
+            -- as prior to GHC 8.4...
             dig (NormalC _ [(_, AppT (ConT n) (VarT _))])               = digItOut n
 #if __GLASGOW_HASKELL__ < 800
             dig (ForallC _ _ (NormalC _ [(_, AppT (ConT _) (ConT n))])) = return [n]
 #else
+            -- ...but this is what IntegralNumType will be reified as on GHC 8.4
+            -- and later, after the changes described in
+            -- https://ghc.haskell.org/trac/ghc/wiki/Migration/8.4#TemplateHaskellreificationchangesforGADTs
+            dig (ForallC _ _ (GadtC _ [(_, AppT (ConT n) (VarT _))] _)) = digItOut n
             dig (GadtC _ _ (AppT (ConT _) (ConT n)))                    = return [n]
 #endif
             dig _ = error "Unexpected case generating FromIntegral instances"
diff -ru accelerate-1.1.1.0.orig/Data/Array/Accelerate/Classes/ToFloating.hs accelerate-1.1.1.0/Data/Array/Accelerate/Classes/ToFloating.hs
--- accelerate-1.1.1.0.orig/Data/Array/Accelerate/Classes/ToFloating.hs	2017-05-08 23:19:50.000000000 -0400
+++ accelerate-1.1.1.0/Data/Array/Accelerate/Classes/ToFloating.hs	2018-01-23 13:07:42.681388713 -0500
@@ -57,10 +57,16 @@
           TyConI (DataD _ _ _ _ cons _) <- reify name
 #endif
           let
+            -- This is what a constructor such as IntegralNumType will be reified
+            -- as prior to GHC 8.4...
             dig (NormalC _ [(_, AppT (ConT n) (VarT _))])               = digItOut n
 #if __GLASGOW_HASKELL__ < 800
             dig (ForallC _ _ (NormalC _ [(_, AppT (ConT _) (ConT n))])) = return [n]
 #else
+            -- ...but this is what IntegralNumType will be reified as on GHC 8.4
+            -- and later, after the changes described in
+            -- https://ghc.haskell.org/trac/ghc/wiki/Migration/8.4#TemplateHaskellreificationchangesforGADTs
+            dig (ForallC _ _ (GadtC _ [(_, AppT (ConT n) (VarT _))] _)) = digItOut n
             dig (GadtC _ _ (AppT (ConT _) (ConT n)))                    = return [n]
 #endif
             dig _ = error "Unexpected case generating ToFloating instances"
diff -ru accelerate-1.1.1.0.orig/Data/Array/Accelerate/Data/Fold.hs accelerate-1.1.1.0/Data/Array/Accelerate/Data/Fold.hs
--- accelerate-1.1.1.0.orig/Data/Array/Accelerate/Data/Fold.hs	2017-05-08 23:19:50.000000000 -0400
+++ accelerate-1.1.1.0/Data/Array/Accelerate/Data/Fold.hs	2018-01-23 13:20:48.461408502 -0500
@@ -78,7 +78,7 @@
     -> Acc (Array sh o)
 runFold (Fold tally summarise) is
   = A.map summarise
-  $ A.fold (<>) mempty
+  $ A.fold mappend mempty
   $ A.map tally is
 
 
diff -ru accelerate-1.1.1.0.orig/Data/Array/Accelerate/Data/Monoid.hs accelerate-1.1.1.0/Data/Array/Accelerate/Data/Monoid.hs
--- accelerate-1.1.1.0.orig/Data/Array/Accelerate/Data/Monoid.hs	2017-07-16 23:17:03.000000000 -0400
+++ accelerate-1.1.1.0/Data/Array/Accelerate/Data/Monoid.hs	2018-01-23 13:19:27.581406465 -0500
@@ -1,3 +1,4 @@
+{-# LANGUAGE CPP                   #-}
 {-# LANGUAGE ConstraintKinds       #-}
 {-# LANGUAGE FlexibleContexts      #-}
 {-# LANGUAGE FlexibleInstances     #-}
@@ -33,7 +34,12 @@
 import Data.Array.Accelerate.Array.Sugar                            as A
 
 import Data.Function
-import Data.Monoid                                                  hiding ( mconcat )
+#if __GLASGOW_HASKELL__ >= 800
+import Data.Monoid                                                  hiding ( (<>) )
+import Data.Semigroup
+#else
+import Data.Monoid
+#endif
 import qualified Prelude                                            as P
 
 
@@ -64,6 +70,13 @@
   mempty  = 0
   mappend = lift2 (mappend :: Sum (Exp a) -> Sum (Exp a) -> Sum (Exp a))
 
+#if __GLASGOW_HASKELL__ >= 800
+-- | @since 1.2.0.0
+instance Num a => Semigroup (Exp (Sum a)) where
+  (<>)       = (+)
+  -- stimes n x = lift . Sum $ n * getSum (unlift x)
+#endif
+
 instance A.Num a => P.Num (Exp (Sum a)) where
   (+)             = lift2 ((+) :: Sum (Exp a) -> Sum (Exp a) -> Sum (Exp a))
   (-)             = lift2 ((-) :: Sum (Exp a) -> Sum (Exp a) -> Sum (Exp a))
@@ -113,6 +126,13 @@
   mempty  = 1
   mappend = lift2 (mappend :: Product (Exp a) -> Product (Exp a) -> Product (Exp a))
 
+#if __GLASGOW_HASKELL__ >= 800
+-- | @since 1.2.0.0
+instance Num a => Semigroup (Exp (Product a)) where
+  (<>)       = (*)
+  -- stimes n x = lift . Product $ getProduct (unlift x) ^ constant n
+#endif
+
 instance A.Num a => P.Num (Exp (Product a)) where
   (+)             = lift2 ((+) :: Product (Exp a) -> Product (Exp a) -> Product (Exp a))
   (-)             = lift2 ((-) :: Product (Exp a) -> Product (Exp a) -> Product (Exp a))
@@ -147,26 +167,54 @@
   mappend x y = let (a1,b1) = unlift x  :: (Exp a, Exp b)
                     (a2,b2) = unlift y
                 in
-                lift (a1<>a2, b1<>b2)
+                lift (a1 `mappend` a2, b1 `mappend` b2)
 
 instance (Elt a, Elt b, Elt c, Monoid (Exp a), Monoid (Exp b), Monoid (Exp c)) => Monoid (Exp (a,b,c)) where
   mempty      = lift (mempty :: Exp a, mempty :: Exp b, mempty :: Exp c)
   mappend x y = let (a1,b1,c1) = unlift x  :: (Exp a, Exp b, Exp c)
                     (a2,b2,c2) = unlift y
                 in
-                lift (a1<>a2, b1<>b2, c1<>c2)
+                lift (a1 `mappend` a2, b1 `mappend` b2, c1 `mappend` c2)
 
 instance (Elt a, Elt b, Elt c, Elt d, Monoid (Exp a), Monoid (Exp b), Monoid (Exp c), Monoid (Exp d)) => Monoid (Exp (a,b,c,d)) where
   mempty      = lift (mempty :: Exp a, mempty :: Exp b, mempty :: Exp c, mempty :: Exp d)
   mappend x y = let (a1,b1,c1,d1) = unlift x  :: (Exp a, Exp b, Exp c, Exp d)
                     (a2,b2,c2,d2) = unlift y
                 in
-                lift (a1<>a2, b1<>b2, c1<>c2, d1<>d2)
+                lift (a1 `mappend` a2, b1 `mappend` b2, c1 `mappend` c2, d1 `mappend` d2)
 
 instance (Elt a, Elt b, Elt c, Elt d, Elt e, Monoid (Exp a), Monoid (Exp b), Monoid (Exp c), Monoid (Exp d), Monoid (Exp e)) => Monoid (Exp (a,b,c,d,e)) where
   mempty      = lift (mempty :: Exp a, mempty :: Exp b, mempty :: Exp c, mempty :: Exp d, mempty :: Exp e)
   mappend x y = let (a1,b1,c1,d1,e1) = unlift x  :: (Exp a, Exp b, Exp c, Exp d, Exp e)
                     (a2,b2,c2,d2,e2) = unlift y
                 in
-                lift (a1<>a2, b1<>b2, c1<>c2, d1<>d2, e1<>e2)
+                lift (a1 `mappend` a2, b1 `mappend` b2, c1 `mappend` c2, d1 `mappend` d2, e1 `mappend` e2)
+
+#if __GLASGOW_HASKELL__ >= 800
+instance Semigroup (Exp ()) where
+  _ <> _ = constant ()
+
+instance (Elt a, Elt b, Semigroup (Exp a), Semigroup (Exp b)) => Semigroup (Exp (a,b)) where
+  x <> y      = let (a1,b1) = unlift x  :: (Exp a, Exp b)
+                    (a2,b2) = unlift y
+                in
+                lift (a1 <> a2, b1 <> b2)
+
+instance (Elt a, Elt b, Elt c, Semigroup (Exp a), Semigroup (Exp b), Semigroup (Exp c)) => Semigroup (Exp (a,b,c)) where
+  x <> y      = let (a1,b1,c1) = unlift x  :: (Exp a, Exp b, Exp c)
+                    (a2,b2,c2) = unlift y
+                in
+                lift (a1 <> a2, b1 <> b2, c1 <> c2)
 
+instance (Elt a, Elt b, Elt c, Elt d, Semigroup (Exp a), Semigroup (Exp b), Semigroup (Exp c), Semigroup (Exp d)) => Semigroup (Exp (a,b,c,d)) where
+  x <> y      = let (a1,b1,c1,d1) = unlift x  :: (Exp a, Exp b, Exp c, Exp d)
+                    (a2,b2,c2,d2) = unlift y
+                in
+                lift (a1 <> a2, b1 <> b2, c1 <> c2, d1 <> d2)
+
+instance (Elt a, Elt b, Elt c, Elt d, Elt e, Semigroup (Exp a), Semigroup (Exp b), Semigroup (Exp c), Semigroup (Exp d), Semigroup (Exp e)) => Semigroup (Exp (a,b,c,d,e)) where
+  x <> y      = let (a1,b1,c1,d1,e1) = unlift x  :: (Exp a, Exp b, Exp c, Exp d, Exp e)
+                    (a2,b2,c2,d2,e2) = unlift y
+                in
+                lift (a1 <> a2, b1 <> b2, c1 <> c2, d1 <> d2, e1 <> e2)
+#endif
