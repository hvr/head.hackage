diff -ru store-0.5.1.0.orig/src/Data/Store/TH/Internal.hs store-0.5.1.0/src/Data/Store/TH/Internal.hs
--- store-0.5.1.0.orig/src/Data/Store/TH/Internal.hs	2019-04-24 14:58:44.000000000 -0400
+++ store-0.5.1.0/src/Data/Store/TH/Internal.hs	2019-05-11 08:56:43.536046269 -0400
@@ -363,7 +363,14 @@
     FamilyI _ insts <- reify ''UV.Vector
     return (map (everywhere (id `extT` dequalVarT) . go) insts)
   where
-#if MIN_VERSION_template_haskell(2,11,0)
+#if MIN_VERSION_template_haskell(2,15,0)
+    go (NewtypeInstD preds _ lhs _ con _)
+      | [_, ty] <- unAppsT lhs
+      = (preds, ty, conToDataCons con)
+    go (DataInstD preds _ lhs _ cons _)
+      | [_, ty] <- unAppsT lhs
+      = (preds, ty, concatMap conToDataCons cons)
+#elif MIN_VERSION_template_haskell(2,11,0)
     go (NewtypeInstD preds _ [ty] _ con _) = (preds, ty, conToDataCons con)
     go (DataInstD preds _ [ty] _ cons _) = (preds, ty, concatMap conToDataCons cons)
 #else
diff -ru store-0.5.1.0.orig/src/Data/Store/TH.hs store-0.5.1.0/src/Data/Store/TH.hs
--- store-0.5.1.0.orig/src/Data/Store/TH.hs	2019-04-24 14:58:44.000000000 -0400
+++ store-0.5.1.0/src/Data/Store/TH.hs	2019-05-11 08:56:43.536046269 -0400
@@ -37,6 +37,7 @@
     , assertRoundtrip
     ) where
 
+import qualified Control.Monad.Fail as Fail
 import Data.Complex ()
 import Data.Store.Impl
 import Data.Typeable (Typeable, typeOf)
@@ -60,7 +61,7 @@
         expr <- [e| property $ changeDepth (\_ -> depth) $ \x -> checkRoundtrip verbose (x :: $(return ty)) |]
         return ("Roundtrips (" ++ pprint ty ++ ")", expr)
 
-assertRoundtrip :: (Eq a, Show a, Store a, Monad m, Typeable a) => Bool -> a -> m ()
+assertRoundtrip :: (Eq a, Show a, Store a, Fail.MonadFail m, Typeable a) => Bool -> a -> m ()
 assertRoundtrip verbose x
     | checkRoundtrip verbose x = return ()
     | otherwise = fail $ "Failed to roundtrip "  ++ show (typeOf x)
diff -ru store-0.5.1.0.orig/src/Data/Store/Version.hs store-0.5.1.0/src/Data/Store/Version.hs
--- store-0.5.1.0.orig/src/Data/Store/Version.hs	2019-04-24 14:58:44.000000000 -0400
+++ store-0.5.1.0/src/Data/Store/Version.hs	2019-05-11 08:56:43.536046269 -0400
@@ -217,7 +217,7 @@
     goField = do
         s <- get
         case sFieldNames s of
-            [] -> fail "impossible case in getStructureInfo'"
+            [] -> error "impossible case in getStructureInfo'"
             (name:names) -> do
                 getStructureInfo' ignore renames (Proxy :: Proxy b)
                 s' <- get
diff -ru store-0.5.1.0.orig/src/System/IO/ByteBuffer.hs store-0.5.1.0/src/System/IO/ByteBuffer.hs
--- store-0.5.1.0.orig/src/System/IO/ByteBuffer.hs	2018-12-24 02:27:39.000000000 -0500
+++ store-0.5.1.0/src/System/IO/ByteBuffer.hs	2019-05-11 08:56:43.536046269 -0400
@@ -43,6 +43,7 @@
 import           Control.Applicative
 import           Control.Exception (SomeException, throwIO)
 import           Control.Exception.Lifted (Exception, bracket, catch)
+import qualified Control.Monad.Fail as Fail
 import           Control.Monad.IO.Class (MonadIO, liftIO)
 import           Control.Monad.Trans.Control (MonadBaseControl)
 import           Data.ByteString (ByteString)
@@ -280,7 +281,7 @@
 -- such the ones created by the @network@ package.
 --
 -- Returns how many bytes could be read non-blockingly.
-fillFromFd :: MonadIO m => ByteBuffer -> Fd -> Int -> m Int
+fillFromFd :: (MonadIO m, Fail.MonadFail m) => ByteBuffer -> Fd -> Int -> m Int
 fillFromFd bb sock maxBytes = if maxBytes < 0
     then fail ("fillFromFd: negative argument (" ++ show maxBytes ++ ")")
     else bbHandler "fillFromFd" bb go
