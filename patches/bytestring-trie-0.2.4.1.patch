diff -ru bytestring-trie-0.2.4.1.orig/src/Data/Trie/Internal.hs bytestring-trie-0.2.4.1/src/Data/Trie/Internal.hs
--- bytestring-trie-0.2.4.1.orig/src/Data/Trie/Internal.hs	2015-04-04 20:59:21.000000000 -0400
+++ bytestring-trie-0.2.4.1/src/Data/Trie/Internal.hs	2018-01-07 18:38:48.327075433 -0500
@@ -69,6 +69,9 @@
 import Data.Binary
 
 import Data.Monoid         (Monoid(..))
+#if MIN_VERSION_base(4,9,0)
+import Data.Semigroup      (Semigroup(..))
+#endif
 import Control.Monad       (liftM, liftM3, liftM4)
 #ifdef APPLICATIVE_IN_BASE
 import Control.Monad       (ap)
@@ -302,10 +305,18 @@
                                unionL = mergeBy (\x _ -> Just x)
 
 
+#if MIN_VERSION_base(4,9,0)
+instance (Semigroup a) => Semigroup (Trie a) where
+    (<>) = mergeBy $ \x y -> Just (x <> y)
+#endif
+
+
 -- This instance is more sensible than Data.IntMap and Data.Map's
 instance (Monoid a) => Monoid (Trie a) where
     mempty  = empty
+#if !(MIN_VERSION_base(4,11,0))
     mappend = mergeBy $ \x y -> Just (x `mappend` y)
+#endif
 
 
 -- Since the Monoid instance isn't natural in @a@, I can't think
