diff -ru hlint-2.0.12.orig/src/Config/Yaml.hs hlint-2.0.12/src/Config/Yaml.hs
--- hlint-2.0.12.orig/src/Config/Yaml.hs	2017-12-12 09:12:49.000000000 -0500
+++ hlint-2.0.12/src/Config/Yaml.hs	2018-01-12 12:32:39.909401432 -0500
@@ -20,7 +20,7 @@
 import qualified Data.HashMap.Strict as Map
 import HSE.All hiding (Rule, String)
 import Data.Functor
-import Data.Monoid
+import Data.Semigroup
 import Util
 import Prelude
 
@@ -40,7 +40,7 @@
 ---------------------------------------------------------------------
 -- YAML DATA TYPE
 
-newtype ConfigYaml = ConfigYaml [ConfigItem] deriving (Monoid,Show)
+newtype ConfigYaml = ConfigYaml [ConfigItem] deriving (Semigroup,Monoid,Show)
 
 data ConfigItem
     = ConfigPackage Package
diff -ru hlint-2.0.12.orig/src/Hint/Extensions.hs hlint-2.0.12/src/Hint/Extensions.hs
--- hlint-2.0.12.orig/src/Hint/Extensions.hs	2017-12-12 09:12:50.000000000 -0500
+++ hlint-2.0.12/src/Hint/Extensions.hs	2018-01-12 12:32:39.909401432 -0500
@@ -123,7 +123,7 @@
 import Data.Ratio
 import Data.Data
 import Refact.Types
-import Data.Monoid
+import Data.Semigroup
 import Prelude
 
 
@@ -244,10 +244,12 @@
     ,derivesData :: [String]
     ,derivesStandalone :: [String]
     }
+instance Semigroup Derives where
+    Derives x1 x2 x3 <> Derives y1 y2 y3 =
+        Derives (x1++y1) (x2++y2) (x3++y3)
 instance Monoid Derives where
     mempty = Derives [] [] []
-    mappend (Derives x1 x2 x3) (Derives y1 y2 y3) =
-        Derives (x1++y1) (x2++y2) (x3++y3)
+    mappend = (<>)
 
 -- | What is derived on newtype, and on data type
 --   'deriving' declarations may be on either, so we approximate as both newtype and data
diff -ru hlint-2.0.12.orig/src/Hint/Restrict.hs hlint-2.0.12/src/Hint/Restrict.hs
--- hlint-2.0.12.orig/src/Hint/Restrict.hs	2017-12-12 09:12:50.000000000 -0500
+++ hlint-2.0.12/src/Hint/Restrict.hs	2018-01-12 12:32:39.909401432 -0500
@@ -17,7 +17,7 @@
 import Hint.Type
 import Data.List
 import Data.Maybe
-import Data.Monoid
+import Data.Semigroup
 import Control.Applicative
 import Prelude
 
@@ -39,9 +39,11 @@
     {riAs :: [String]
     ,riWithin :: [(String, String)]
     }
+instance Semigroup RestrictItem where
+    RestrictItem x1 x2 <> RestrictItem y1 y2 = RestrictItem (x1<>y1) (x2<>y2)
 instance Monoid RestrictItem where
     mempty = RestrictItem [] []
-    mappend (RestrictItem x1 x2) (RestrictItem y1 y2) = RestrictItem (x1<>y1) (x2<>y2)
+    mappend = (<>)
 
 restrictions :: [Setting] -> Map.Map RestrictType (Bool, Map.Map String RestrictItem)
 restrictions settings = Map.map f $ Map.fromListWith (++) [(restrictType x, [x]) | SettingRestrict x <- settings]
diff -ru hlint-2.0.12.orig/src/Hint/Type.hs hlint-2.0.12/src/Hint/Type.hs
--- hlint-2.0.12.orig/src/Hint/Type.hs	2017-12-12 09:12:50.000000000 -0500
+++ hlint-2.0.12/src/Hint/Type.hs	2018-01-12 12:32:39.909401432 -0500
@@ -4,7 +4,7 @@
     module Export
     ) where
 
-import Data.Monoid
+import Data.Semigroup
 import Config.Type
 import HSE.All  as Export
 import Idea     as Export
@@ -26,10 +26,13 @@
     ,hintComment :: [Setting] -> Comment -> [Idea] -- ^ Given a comment generate some 'Idea's.
     }
 
+instance Semigroup Hint where
+    Hint x1 x2 x3 x4 <> Hint y1 y2 y3 y4 = Hint
+         (\a b -> x1 a b ++ y1 a b)
+         (\a b c -> x2 a b c ++ y2 a b c)
+         (\a b c d -> x3 a b c d ++ y3 a b c d)
+         (\a b -> x4 a b ++ y4 a b)
+
 instance Monoid Hint where
     mempty = Hint (\_ _ -> []) (\_ _ _ -> []) (\_ _ _ _ -> []) (\_ _ -> [])
-    mappend (Hint x1 x2 x3 x4) (Hint y1 y2 y3 y4) = Hint
-        (\a b -> x1 a b ++ y1 a b)
-        (\a b c -> x2 a b c ++ y2 a b c)
-        (\a b c d -> x3 a b c d ++ y3 a b c d)
-        (\a b -> x4 a b ++ y4 a b)
+    mappend = (<>)
diff -ru hlint-2.0.12.orig/src/HSE/Scope.hs hlint-2.0.12/src/HSE/Scope.hs
--- hlint-2.0.12.orig/src/HSE/Scope.hs	2017-12-12 09:12:49.000000000 -0500
+++ hlint-2.0.12/src/HSE/Scope.hs	2018-01-12 12:34:00.761403468 -0500
@@ -1,11 +1,11 @@
-{-# LANGUAGE ViewPatterns #-}
+{-# LANGUAGE ViewPatterns, GeneralizedNewtypeDeriving #-}
 
 module HSE.Scope(
     Scope, scopeCreate, scopeImports,
     scopeMatch, scopeMove
     ) where
 
-import Data.Monoid
+import Data.Semigroup
 import HSE.Type
 import HSE.Util
 import Data.List
@@ -34,11 +34,7 @@
 --   Note that the 'mempty' 'Scope' is not equivalent to 'scopeCreate' on an empty module,
 --   due to the implicit import of 'Prelude'.
 newtype Scope = Scope [ImportDecl S]
-             deriving Show
-
-instance Monoid Scope where
-    mempty = Scope []
-    mappend (Scope xs) (Scope ys) = Scope $ xs ++ ys
+             deriving (Show, Monoid, Semigroup)
 
 -- | Create a 'Scope' value from a module, based on the modules imports.
 scopeCreate :: Module SrcSpanInfo -> Scope
diff -ru hlint-2.0.12.orig/src/HSE/Unify.hs hlint-2.0.12/src/HSE/Unify.hs
--- hlint-2.0.12.orig/src/HSE/Unify.hs	2017-12-12 09:12:49.000000000 -0500
+++ hlint-2.0.12/src/HSE/Unify.hs	2018-01-12 12:32:39.909401432 -0500
@@ -1,4 +1,5 @@
 {-# LANGUAGE PatternGuards, ViewPatterns, FlexibleContexts, ScopedTypeVariables #-}
+{-# LANGUAGE GeneralizedNewtypeDeriving #-}
 
 module HSE.Unify(
     Subst, fromSubst,
@@ -10,7 +11,7 @@
 import Data.List.Extra
 import Data.Maybe
 import Data.Data
-import Data.Monoid
+import Data.Semigroup
 import Config.Type
 import Hint.Type
 import Control.Monad
@@ -25,6 +26,7 @@
 -- | A list of substitutions. A key may be duplicated, you need to call 'check'
 --   to ensure the substitution is valid.
 newtype Subst a = Subst [(String, a)]
+    deriving (Semigroup, Monoid)
 
 -- | Unpack the substitution
 fromSubst :: Subst a -> [(String, a)]
@@ -36,10 +38,6 @@
 instance Pretty a => Show (Subst a) where
     show (Subst xs) = unlines [a ++ " = " ++ prettyPrint b | (a,b) <- xs]
 
-instance Monoid (Subst a) where
-    mempty = Subst []
-    mappend (Subst xs) (Subst ys) = Subst $ xs ++ ys
-
 
 -- check the unification is valid and simplify it
 validSubst :: (a -> a -> Bool) -> Subst a -> Maybe (Subst a)
