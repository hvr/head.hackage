diff -ru polyparse-1.12.1.orig/src/Text/ParserCombinators/HuttonMeijer.hs polyparse-1.12.1/src/Text/ParserCombinators/HuttonMeijer.hs
--- polyparse-1.12.1.orig/src/Text/ParserCombinators/HuttonMeijer.hs	2001-09-08 21:46:40.000000000 -0400
+++ polyparse-1.12.1/src/Text/ParserCombinators/HuttonMeijer.hs	2019-03-15 09:39:11.347661735 -0400
@@ -63,7 +63,9 @@
    -- >>=         :: Parser a -> (a -> Parser b) -> Parser b
    (P p) >>= f     = P (\inp -> concat [papply (f v) out | (v,out) <- p inp])
 
+#if !(MIN_VERSION_base(4,13,0))
    fail            = Fail.fail
+#endif
 
 instance Fail.MonadFail Parser where
    -- fail        :: String -> Parser a
diff -ru polyparse-1.12.1.orig/src/Text/ParserCombinators/HuttonMeijerWallace.hs polyparse-1.12.1/src/Text/ParserCombinators/HuttonMeijerWallace.hs
--- polyparse-1.12.1.orig/src/Text/ParserCombinators/HuttonMeijerWallace.hs	2001-09-08 21:46:40.000000000 -0400
+++ polyparse-1.12.1/src/Text/ParserCombinators/HuttonMeijerWallace.hs	2019-03-15 09:39:35.315799506 -0400
@@ -89,7 +89,9 @@
                             [ papply' (f v) s out | (v,s,out) <- res ]
                         Left err  -> Left err
                        )
+#if !(MIN_VERSION_base(4,13,0))
    fail            = Fail.fail
+#endif
 
 instance Fail.MonadFail (Parser s t e) where
    -- fail        :: String -> Parser s t e a
diff -ru polyparse-1.12.1.orig/src/Text/ParserCombinators/Poly/Base.hs polyparse-1.12.1/src/Text/ParserCombinators/Poly/Base.hs
--- polyparse-1.12.1.orig/src/Text/ParserCombinators/Poly/Base.hs	2001-09-08 21:46:40.000000000 -0400
+++ polyparse-1.12.1/src/Text/ParserCombinators/Poly/Base.hs	2019-03-15 09:40:29.772112703 -0400
@@ -26,6 +26,7 @@
   ) where
 
 import Control.Applicative
+import qualified Control.Monad.Fail as Fail
 
 #ifdef __NHC__
 default (Integer,Double,[])	-- hack to avoid bizarre type defaulting error
@@ -62,7 +63,7 @@
 --   There are two additional basic combinators that we expect to be implemented
 --   afresh for every concrete type, but which (for technical reasons)
 --   cannot be class methods.  They are @next@ and @satisfy@.
-class (Functor p, Monad p, Applicative p, Alternative p, Commitment p) =>
+class (Functor p, Monad p, Fail.MonadFail p, Applicative p, Alternative p, Commitment p) =>
       PolyParse p
 
 infixl 3 `apply`
diff -ru polyparse-1.12.1.orig/src/Text/ParserCombinators/Poly/ByteStringChar.hs polyparse-1.12.1/src/Text/ParserCombinators/Poly/ByteStringChar.hs
--- polyparse-1.12.1.orig/src/Text/ParserCombinators/Poly/ByteStringChar.hs	2001-09-08 21:46:40.000000000 -0400
+++ polyparse-1.12.1/src/Text/ParserCombinators/Poly/ByteStringChar.hs	2019-03-15 09:41:30.340461321 -0400
@@ -39,7 +39,9 @@
 
 instance Monad Parser where
     return       = pure
+#if !(MIN_VERSION_base(4,13,0))
     fail         = Fail.fail
+#endif
     (P f) >>= g  = P (continue . f)
       where
         continue (Success ts x)             = let (P g') = g x in g' ts
diff -ru polyparse-1.12.1.orig/src/Text/ParserCombinators/Poly/ByteString.hs polyparse-1.12.1/src/Text/ParserCombinators/Poly/ByteString.hs
--- polyparse-1.12.1.orig/src/Text/ParserCombinators/Poly/ByteString.hs	2001-09-08 21:46:40.000000000 -0400
+++ polyparse-1.12.1/src/Text/ParserCombinators/Poly/ByteString.hs	2019-03-15 09:41:49.356570825 -0400
@@ -40,7 +40,9 @@
 
 instance Monad Parser where
     return       = pure
+#if !(MIN_VERSION_base(4,13,0))
     fail         = Fail.fail
+#endif
     (P f) >>= g  = P (continue . f)
       where
         continue (Success ts x)             = let (P g') = g x in g' ts
diff -ru polyparse-1.12.1.orig/src/Text/ParserCombinators/Poly/Lex.hs polyparse-1.12.1/src/Text/ParserCombinators/Poly/Lex.hs
--- polyparse-1.12.1.orig/src/Text/ParserCombinators/Poly/Lex.hs	2001-09-08 21:46:40.000000000 -0400
+++ polyparse-1.12.1/src/Text/ParserCombinators/Poly/Lex.hs	2019-03-15 09:41:14.892372380 -0400
@@ -56,7 +56,9 @@
 
 instance Monad (Parser t) where
     return       = pure
+#if !(MIN_VERSION_base(4,13,0))
     fail         = Fail.fail
+#endif
     (P f) >>= g  = P (continue . f)
       where
         continue (Success ts x)             = let (P g') = g x in g' ts
diff -ru polyparse-1.12.1.orig/src/Text/ParserCombinators/Poly/Parser.hs polyparse-1.12.1/src/Text/ParserCombinators/Poly/Parser.hs
--- polyparse-1.12.1.orig/src/Text/ParserCombinators/Poly/Parser.hs	2001-09-08 21:46:40.000000000 -0400
+++ polyparse-1.12.1/src/Text/ParserCombinators/Poly/Parser.hs	2019-03-15 09:40:51.276236444 -0400
@@ -40,7 +40,9 @@
 
 instance Monad (Parser t) where
     return       = pure
+#if !(MIN_VERSION_base(4,13,0))
     fail         = Fail.fail
+#endif
     (P f) >>= g  = P (continue . f)
       where
         continue (Success ts x)             = let (P g') = g x in g' ts
diff -ru polyparse-1.12.1.orig/src/Text/ParserCombinators/Poly/StateParser.hs polyparse-1.12.1/src/Text/ParserCombinators/Poly/StateParser.hs
--- polyparse-1.12.1.orig/src/Text/ParserCombinators/Poly/StateParser.hs	2001-09-08 21:46:40.000000000 -0400
+++ polyparse-1.12.1/src/Text/ParserCombinators/Poly/StateParser.hs	2019-03-15 09:42:06.188667777 -0400
@@ -43,7 +43,9 @@
 
 instance Monad (Parser s t) where
     return       = pure
+#if !(MIN_VERSION_base(4,13,0))
     fail         = Fail.fail
+#endif
     (P f) >>= g  = P (\s-> continue . f s)
       where
         continue (Success (ts,s) x)        = let (P g') = g x in g' s ts
diff -ru polyparse-1.12.1.orig/src/Text/ParserCombinators/Poly/StateText.hs polyparse-1.12.1/src/Text/ParserCombinators/Poly/StateText.hs
--- polyparse-1.12.1.orig/src/Text/ParserCombinators/Poly/StateText.hs	2001-09-08 21:46:40.000000000 -0400
+++ polyparse-1.12.1/src/Text/ParserCombinators/Poly/StateText.hs	2019-03-15 09:42:20.908752570 -0400
@@ -46,7 +46,9 @@
 
 instance Monad (Parser s) where
     return       = pure
+#if !(MIN_VERSION_base(4,13,0))
     fail         = Fail.fail
+#endif
     (P f) >>= g  = P (\s-> continue . f s)
       where
         continue (Success (ts,s) x)         = let (P g') = g x in g' s ts
diff -ru polyparse-1.12.1.orig/src/Text/ParserCombinators/Poly/Text.hs polyparse-1.12.1/src/Text/ParserCombinators/Poly/Text.hs
--- polyparse-1.12.1.orig/src/Text/ParserCombinators/Poly/Text.hs	2001-09-08 21:46:40.000000000 -0400
+++ polyparse-1.12.1/src/Text/ParserCombinators/Poly/Text.hs	2019-03-15 09:42:37.876850329 -0400
@@ -40,7 +40,9 @@
 
 instance Monad Parser where
     return       = pure
+#if !(MIN_VERSION_base(4,13,0))
     fail         = Fail.fail
+#endif
     (P f) >>= g  = P (continue . f)
       where
         continue (Success ts x)             = let (P g') = g x in g' ts
