diff -ru formatting-6.3.0.orig/formatting.cabal formatting-6.3.0/formatting.cabal
--- formatting-6.3.0.orig/formatting.cabal	2017-12-20 14:13:42.000000000 +0000
+++ formatting-6.3.0/formatting.cabal	2018-02-08 11:14:40.098204393 +0000
@@ -42,7 +42,9 @@
     transformers,
     bytestring,
     integer-gmp >= 0.2
-
+  if !impl(ghc >= 8.0)
+    build-depends:
+      semigroups >= 0.11 && < 0.19
   hs-source-dirs:    src
   ghc-options:       -O2
   cpp-options: -DINTEGER_GMP
Only in formatting-6.3.0: ghc-8_4.patch
diff -ru formatting-6.3.0.orig/src/Data/Text/Format/Functions.hs formatting-6.3.0/src/Data/Text/Format/Functions.hs
--- formatting-6.3.0.orig/src/Data/Text/Format/Functions.hs	2017-12-20 13:43:07.000000000 +0000
+++ formatting-6.3.0/src/Data/Text/Format/Functions.hs	2018-02-08 11:14:40.098204393 +0000
@@ -1,4 +1,5 @@
 {-# LANGUAGE MagicHash #-}
+{-# LANGUAGE CPP #-}
 
 -- |
 -- Module      : Data.Text.Format.Functions
@@ -19,7 +20,12 @@
 
 import Data.Monoid (mappend)
 import Data.Text.Lazy.Builder (Builder)
+#if MIN_VERSION_base(4,11,0)
+import Prelude hiding ((<>))
+import GHC.Base hiding ((<>))
+#else
 import GHC.Base
+#endif
 
 -- | Unsafe conversion for decimal digits.
 {-# INLINE i2d #-}
diff -ru formatting-6.3.0.orig/src/Data/Text/Format/Int.hs formatting-6.3.0/src/Data/Text/Format/Int.hs
--- formatting-6.3.0.orig/src/Data/Text/Format/Int.hs	2017-12-20 13:43:07.000000000 +0000
+++ formatting-6.3.0/src/Data/Text/Format/Int.hs	2018-02-08 11:14:40.098204393 +0000
@@ -17,6 +17,9 @@
     , minus
     ) where
 
+#if MIN_VERSION_base(4,11,0)
+import Prelude hiding ((<>))
+#endif
 import Data.Int (Int8, Int16, Int32, Int64)
 import Data.Monoid (mempty)
 import Data.Text.Format.Functions ((<>), i2d)
diff -ru formatting-6.3.0.orig/src/Formatting/Buildable.hs formatting-6.3.0/src/Formatting/Buildable.hs
--- formatting-6.3.0.orig/src/Formatting/Buildable.hs	2017-12-20 13:43:07.000000000 +0000
+++ formatting-6.3.0/src/Formatting/Buildable.hs	2018-02-08 11:14:40.098204393 +0000
@@ -20,6 +20,9 @@
 import qualified Data.ByteString.Lazy as L
 import           Data.Void (Void, absurd)
 #endif
+#if MIN_VERSION_base(4,11,0)
+import Prelude hiding ((<>))
+#endif
 
 import           Data.Monoid (mempty)
 import           Data.Int (Int8, Int16, Int32, Int64)
diff -ru formatting-6.3.0.orig/src/Formatting/Internal.hs formatting-6.3.0/src/Formatting/Internal.hs
--- formatting-6.3.0.orig/src/Formatting/Internal.hs	2017-12-20 11:43:50.000000000 +0000
+++ formatting-6.3.0/src/Formatting/Internal.hs	2018-02-08 11:14:40.098204393 +0000
@@ -1,12 +1,16 @@
 {-# LANGUAGE GADTs #-}
 {-# LANGUAGE FlexibleInstances #-}
+{-# LANGUAGE CPP #-}
 
 -- | Internal format starters.
 
 module Formatting.Internal where
 
 import           Control.Category (Category(..))
+import qualified Data.Semigroup as Sem
+#if !MIN_VERSION_base(4,11,0)
 import           Data.Monoid
+#endif
 import           Data.String
 import qualified Data.Text as S (Text)
 import           Data.Text.Lazy (Text)
@@ -50,10 +54,13 @@
 -- | Useful instance for applying two formatters to the same input
 -- argument. For example: @format (year <> "/" % month) now@ will
 -- yield @"2015/01"@.
-instance Monoid (Format r (a -> r)) where
-  mappend m n =
+instance Sem.Semigroup (Format r (a -> r)) where
+  (<>) m n =
     Format (\k a ->
               runFormat m (\b1 -> runFormat n (\b2 -> k (b1 <> b2)) a) a)
+
+instance Monoid (Format r (a -> r)) where
+  mappend = (<>)
   mempty = Format (\k _ -> k mempty)
 
 -- | Useful instance for writing format string. With this you can
