diff -ru accelerate-llvm-1.1.0.0.orig/Control/Parallel/Meta.hs accelerate-llvm-1.1.0.0/Control/Parallel/Meta.hs
--- accelerate-llvm-1.1.0.0.orig/Control/Parallel/Meta.hs	2017-07-03 19:46:40.000000000 -0400
+++ accelerate-llvm-1.1.0.0/Control/Parallel/Meta.hs	2018-01-23 19:09:25.433935263 -0500
@@ -1,3 +1,4 @@
+{-# LANGUAGE CPP #-}
 {-# OPTIONS_HADDOCK hide #-}
 -- |
 -- Module      : Control.Parallel.Meta
@@ -24,7 +25,10 @@
 import Control.Parallel.Meta.Worker
 import Data.ByteString.Short                                        ( ShortByteString )
 import Data.Concurrent.Deque.Class
-import Data.Monoid
+import Data.Monoid                                                  ( Monoid(..) )
+#if __GLASGOW_HASKELL__ >= 800
+import Data.Semigroup                                               ( Semigroup(..) )
+#endif
 import Data.Sequence                                                ( Seq )
 import Data.Range.Range                                             as R
 import qualified Data.Vector                                        as V
@@ -39,6 +43,11 @@
 data Startup = Startup {
   _runStartup :: Gang -> IO () }
 
+#if __GLASGOW_HASKELL__ >= 800
+instance Semigroup Startup where
+  Startup st1 <> Startup st2 = Startup $ \g -> st1 g >> st2 g
+#endif
+
 instance Monoid Startup where
   mempty                            = Startup $ \_ -> return ()
   Startup st1 `mappend` Startup st2 = Startup $ \g -> st1 g >> st2 g
@@ -52,6 +61,17 @@
 data WorkSearch = WorkSearch {
   runWorkSearch :: Int -> Workers -> IO (Maybe Range) }
 
+#if __GLASGOW_HASKELL__ >= 800
+instance Semigroup WorkSearch where
+  {-# INLINE (<>) #-}
+  WorkSearch ws1 <> WorkSearch ws2 =
+    WorkSearch $ \tid st -> do
+        mwork <- ws1 tid st
+        case mwork of
+          Nothing -> ws2 tid st
+          _       -> return mwork
+#endif
+
 instance Monoid WorkSearch where
   mempty                                  = WorkSearch $ \_ _ -> return Nothing
   WorkSearch ws1 `mappend` WorkSearch ws2 =
@@ -72,9 +92,15 @@
     workSearch  :: WorkSearch
   }
 
+#if __GLASGOW_HASKELL__ >= 800
+instance Semigroup Resource where
+  {-# INLINE (<>) #-}
+  Resource ws1 <> Resource ws2 = Resource (ws1 <> ws2)
+#endif
+
 instance Monoid Resource where
   mempty                                = Resource mempty
-  mappend (Resource ws1) (Resource ws2) = Resource (ws1 <> ws2)
+  mappend (Resource ws1) (Resource ws2) = Resource (ws1 `mappend` ws2)
 
 
 -- | An action to execute. The first parameters are the start and end indices of
@@ -112,6 +138,11 @@
     _runFinalise :: Seq Range -> IO ()
   }
 
+#if __GLASGOW_HASKELL__ >= 800
+instance Semigroup Finalise where
+  Finalise f1 <> Finalise f2 = Finalise $ \r -> f1 r >> f2 r
+#endif
+
 instance Monoid Finalise where
   mempty                            = Finalise $ \_ -> return ()
   Finalise f1 `mappend` Finalise f2 = Finalise $ \r -> f1 r >> f2 r
diff -ru accelerate-llvm-1.1.0.0.orig/LLVM/AST/Type/Name.hs accelerate-llvm-1.1.0.0/LLVM/AST/Type/Name.hs
--- accelerate-llvm-1.1.0.0.orig/LLVM/AST/Type/Name.hs	2017-08-25 03:09:47.000000000 -0400
+++ accelerate-llvm-1.1.0.0/LLVM/AST/Type/Name.hs	2018-01-23 19:00:51.009922308 -0500
@@ -1,3 +1,4 @@
+{-# LANGUAGE CPP                #-}
 {-# LANGUAGE DeriveDataTypeable #-}
 {-# LANGUAGE RoleAnnotations    #-}
 {-# OPTIONS_HADDOCK hide #-}
@@ -16,6 +17,9 @@
 
 import Data.ByteString.Short                                        ( ShortByteString )
 import Data.Data
+#if __GLASGOW_HASKELL__ >= 800
+import Data.Semigroup
+#endif
 import Data.String
 import Data.Word
 import Prelude
@@ -71,6 +75,11 @@
 instance IsString Label where
   fromString = Label . fromString
 
+#if __GLASGOW_HASKELL__ >= 800
+instance Semigroup Label where
+  Label x <> Label y = Label (x <> y)
+#endif
+
 instance Monoid Label where
   mempty                      = Label mempty
   mappend (Label x) (Label y) = Label (mappend x y)
