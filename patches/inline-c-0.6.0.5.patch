diff -ru inline-c-0.6.0.5.orig/inline-c.cabal inline-c-0.6.0.5/inline-c.cabal
--- inline-c-0.6.0.5.orig/inline-c.cabal	2017-08-19 14:10:36.000000000 -0400
+++ inline-c-0.6.0.5/inline-c.cabal	2018-02-04 15:14:04.043689811 -0500
@@ -33,13 +33,14 @@
   other-modules:       Language.C.Inline.FunPtr
   ghc-options:         -Wall
   build-depends:       base >=4.7 && <5
-                     , ansi-wl-pprint
+                     , ansi-wl-pprint >= 0.6.8
                      , bytestring
                      , containers
                      , hashable
                      , mtl
                      , parsec >= 3
                      , parsers
+                     , semigroups >= 0.16
                      , template-haskell >= 2.12.0.0
                      , transformers >= 0.1.3.0
                      , unordered-containers
diff -ru inline-c-0.6.0.5.orig/src/Language/C/Inline/Context.hs inline-c-0.6.0.5/src/Language/C/Inline/Context.hs
--- inline-c-0.6.0.5.orig/src/Language/C/Inline/Context.hs	2017-07-23 09:21:45.000000000 -0400
+++ inline-c-0.6.0.5/src/Language/C/Inline/Context.hs	2018-02-04 14:56:15.955662913 -0500
@@ -51,7 +51,6 @@
 import           Data.Coerce
 import           Data.Int (Int8, Int16, Int32, Int64)
 import qualified Data.Map as Map
-import           Data.Monoid ((<>))
 import           Data.Typeable (Typeable)
 import qualified Data.Vector.Storable as V
 import qualified Data.Vector.Storable.Mutable as VM
@@ -70,6 +69,10 @@
 import           Data.Traversable (traverse)
 #endif
 
+#if !(MIN_VERSION_base(4,11,0))
+import           Data.Semigroup (Semigroup(..))
+#endif
+
 import           Language.C.Inline.FunPtr
 import qualified Language.C.Types as C
 import           Language.C.Inline.HaskellIdentifier
@@ -150,6 +153,14 @@
     -- ^ TH.LangC by default
   }
 
+instance Semigroup Context where
+  ctx2 <> ctx1 = Context
+    { ctxTypesTable = ctxTypesTable ctx1 <> ctxTypesTable ctx2
+    , ctxAntiQuoters = ctxAntiQuoters ctx1 <> ctxAntiQuoters ctx2
+    , ctxOutput = ctxOutput ctx1 <|> ctxOutput ctx2
+    , ctxForeignSrcLang = ctxForeignSrcLang ctx1 <|> ctxForeignSrcLang ctx2
+    }
+
 instance Monoid Context where
   mempty = Context
     { ctxTypesTable = mempty
@@ -158,12 +169,9 @@
     , ctxForeignSrcLang = Nothing
     }
 
-  mappend ctx2 ctx1 = Context
-    { ctxTypesTable = ctxTypesTable ctx1 <> ctxTypesTable ctx2
-    , ctxAntiQuoters = ctxAntiQuoters ctx1 <> ctxAntiQuoters ctx2
-    , ctxOutput = ctxOutput ctx1 <|> ctxOutput ctx2
-    , ctxForeignSrcLang = ctxForeignSrcLang ctx1 <|> ctxForeignSrcLang ctx2
-    }
+#if !(MIN_VERSION_base(4,11,0))
+  mappend = (<>)
+#endif
 
 -- | Context useful to work with vanilla C. Used by default.
 --
diff -ru inline-c-0.6.0.5.orig/src/Language/C/Types.hs inline-c-0.6.0.5/src/Language/C/Types.hs
--- inline-c-0.6.0.5.orig/src/Language/C/Types.hs	2017-07-23 09:21:43.000000000 -0400
+++ inline-c-0.6.0.5/src/Language/C/Types.hs	2018-02-04 14:56:15.955662913 -0500
@@ -65,7 +65,6 @@
 import           Control.Monad.State (execState, modify)
 import           Data.List (partition)
 import           Data.Maybe (fromMaybe)
-import           Data.Monoid ((<>))
 import           Data.Typeable (Typeable)
 import           Text.PrettyPrint.ANSI.Leijen ((</>), (<+>))
 import qualified Text.PrettyPrint.ANSI.Leijen as PP
@@ -77,6 +76,10 @@
 import           Data.Traversable (Traversable)
 #endif
 
+#if !(MIN_VERSION_base(4,11,0))
+import           Data.Semigroup (Semigroup(..))
+#endif
+
 import qualified Language.C.Types.Parse as P
 
 ------------------------------------------------------------------------
@@ -103,11 +106,16 @@
   , functionSpecifiers :: [P.FunctionSpecifier]
   } deriving (Typeable, Show, Eq)
 
+instance Semigroup Specifiers where
+  Specifiers x1 y1 z1 <> Specifiers x2 y2 z2 =
+    Specifiers (x1 ++ x2) (y1 ++ y2) (z1 ++ z2)
+
 instance Monoid Specifiers where
   mempty = Specifiers [] [] []
 
-  mappend (Specifiers x1 y1 z1) (Specifiers x2 y2 z2) =
-    Specifiers (x1 ++ x2) (y1 ++ y2) (z1 ++ z2)
+#if !(MIN_VERSION_base(4,11,0))
+  mappend = (<>)
+#endif
 
 data Type i
   = TypeSpecifier Specifiers TypeSpecifier
