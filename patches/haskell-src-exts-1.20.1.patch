commit f1ab604faf30672af3581ed1370c8d88d7ebf28f
Author: Ryan Scott <ryan.gl.scott@gmail.com>
Date:   Thu Dec 28 12:02:29 2017 -0500

    Adapt to the Semigroupâ€“Monoid Proposal

diff --git a/src/Language/Haskell/Exts/InternalParser.ly b/src/Language/Haskell/Exts/InternalParse
index ee20f64..8a8ea96 100644
--- a/src/Language/Haskell/Exts/InternalParser.ly
+++ b/src/Language/Haskell/Exts/InternalParser.ly
@@ -1,4 +1,5 @@
 > {
+> {-# LANGUAGE CPP #-}
 > {-# OPTIONS_HADDOCK hide #-}
 > -----------------------------------------------------------------------------
 > -- |
@@ -40,6 +41,9 @@
 > import Control.Monad ( liftM, (<=<), when )
 > import Control.Applicative ( (<$>) )
 > import Data.Maybe
+> #if MIN_VERSION_base(4,11,0)
+> import Prelude hiding ((<>))
+> #endif
 import Debug.Trace (trace)

 > }
diff --git a/src/Language/Haskell/Exts/ParseMonad.hs b/src/Language/Haskell/Exts/ParseMonad.hs
index bc77eb5..209e76b 100644
--- a/src/Language/Haskell/Exts/ParseMonad.hs
+++ b/src/Language/Haskell/Exts/ParseMonad.hs
@@ -1,3 +1,4 @@
+{-# LANGUAGE CPP #-}
 {-# OPTIONS_HADDOCK hide #-}
 -----------------------------------------------------------------------------
 -- |
@@ -45,7 +46,10 @@ import Language.Haskell.Exts.Extension -- (Extension, impliesExts, haskell2010)
 import Data.List (intercalate)
 import Control.Applicative
 import Control.Monad (when, liftM, ap)
-import Data.Monoid
+import Data.Monoid hiding ((<>))
+#if MIN_VERSION_base(4,9,0)
+import Data.Semigroup
+#endif
 -- To avoid import warnings for Control.Applicative and Data.Monoid
 import Prelude

@@ -98,12 +102,24 @@ instance Monad ParseResult where
   ParseOk x           >>= f = f x
   ParseFailed loc msg >>= _ = ParseFailed loc msg

-instance Monoid m => Monoid (ParseResult m) where
+#if MIN_VERSION_base(4,9,0)
+instance Semigroup m => Semigroup (ParseResult m) where
+ ParseOk x <> ParseOk y = ParseOk $ x <> y
+ ParseOk _ <> err       = err
+ err       <> _         = err -- left-biased
+#endif
+
+instance ( Monoid m
+#if MIN_VERSION_base(4,9,0) && !(MIN_VERSION_base(4,11,0))
+         , Semigroup m
+#endif
+         ) => Monoid (ParseResult m) where
   mempty = ParseOk mempty
+#if !(MIN_VERSION_base(4,11,0))
   ParseOk x `mappend` ParseOk y = ParseOk $ x `mappend` y
   ParseOk _ `mappend` err       = err
   err       `mappend` _         = err -- left-biased
-
+#endif

 -- internal version
 data ParseStatus a = Ok ParseState a | Failed SrcLoc String
diff --git a/src/Language/Haskell/Exts/Pretty.hs b/src/Language/Haskell/Exts/Pretty.hs
index c03e438..adced3f 100644
--- a/src/Language/Haskell/Exts/Pretty.hs
+++ b/src/Language/Haskell/Exts/Pretty.hs
@@ -31,7 +31,11 @@ import qualified Language.Haskell.Exts.ParseSyntax as P

 import Language.Haskell.Exts.SrcLoc hiding (loc)

-import Prelude hiding (exp)
+import Prelude hiding ( exp
+#if MIN_VERSION_base(4,11,0)
+                      , (<>)
+#endif
+                      )
 import qualified Text.PrettyPrint as P
 import Data.List (intersperse)
 import Data.Maybe (isJust , fromMaybe)
