From c2828063c49d515cc7a8e474fbc2c8a630fac699 Mon Sep 17 00:00:00 2001
From: Moritz Angermann <moritz.angermann@gmail.com>
Date: Mon, 13 Nov 2017 14:37:41 +0800
Subject: [PATCH 1/5] Semigroup-Monoid-Proposal changes

Changes required to build against GHC HEAD.
---
 src/Development/Shake/Command.hs             |  3 ++-
 src/Development/Shake/Internal/Core/Rules.hs | 14 ++++++++++----
 src/Development/Shake/Internal/Progress.hs   | 11 +++++++----
 src/General/Bilist.hs                        |  6 +++++-
 src/General/Binary.hs                        |  7 +++++--
 src/General/ListBuilder.hs                   | 11 ++++++++---
 6 files changed, 37 insertions(+), 15 deletions(-)

diff --git a/src/Development/Shake/Command.hs b/src/Development/Shake/Command.hs
index 4bd26717..b28fb741 100644
--- a/src/Development/Shake/Command.hs
+++ b/src/Development/Shake/Command.hs
@@ -30,6 +30,7 @@ import Data.Char
 import Data.Either.Extra
 import Data.List.Extra
 import Data.Maybe
+import Data.Semigroup (Semigroup)
 import Data.Monoid
 import System.Directory
 import System.Environment.Extra
@@ -586,7 +587,7 @@ cmd_ = cmd

 -- | The arguments to 'cmd' - see 'cmd' for examples and semantics.
 newtype CmdArgument = CmdArgument [Either CmdOption String]
-  deriving (Eq, Monoid, Show)
+  deriving (Eq, Semigroup, Monoid, Show)

 -- | The arguments to 'cmd' - see 'cmd' for examples and semantics.
 class CmdArguments t where
diff --git a/src/Development/Shake/Internal/Core/Rules.hs b/src/Development/Shake/Internal/Core/Rules.hs
index 9f4a885a..f52031b3 100644
--- a/src/Development/Shake/Internal/Core/Rules.hs
+++ b/src/Development/Shake/Internal/Core/Rules.hs
@@ -28,6 +28,7 @@ import qualified Data.HashMap.Strict as Map
 import Data.Maybe
 import System.IO.Extra
 import System.IO.Unsafe
+import Data.Semigroup (Semigroup (..))
 import Data.Monoid
 import qualified Data.ByteString.Lazy as LBS
 import qualified Data.Binary.Builder as Bin
@@ -102,9 +103,8 @@ data SRules = SRules
     ,userRules :: !(Map.HashMap TypeRep{-k-} UserRule_)
     }

-instance Monoid SRules where
-    mempty = SRules mempty Map.empty Map.empty
-    mappend (SRules x1 x2 x3) (SRules y1 y2 y3) = SRules (mappend x1 y1) (Map.unionWithKey f x2 y2) (Map.unionWith g x3 y3)
+instance Semigroup SRules where
+    (SRules x1 x2 x3) <> (SRules y1 y2 y3) = SRules (mappend x1 y1) (Map.unionWithKey f x2 y2) (Map.unionWith g x3 y3)
         where
             f k _ _ = unsafePerformIO $ errorRuleDefinedMultipleTimes k
             g (UserRule_ x) (UserRule_ y) = UserRule_ $ Unordered $ fromUnordered x ++ fromUnordered (fromJust $ cast y)
@@ -112,10 +112,16 @@ instance Monoid SRules where
             fromUnordered (Unordered xs) = xs
             fromUnordered x = [x]

+instance Monoid SRules where
+    mempty = SRules mempty Map.empty Map.empty
+    mappend = (<>)
+
+instance Semigroup a => Semigroup (Rules a) where
+    (<>) = liftA2 (<>)

 instance Monoid a => Monoid (Rules a) where
     mempty = return mempty
-    mappend = liftA2 mappend
+    mappend = (<>)


 -- | Add a value of type 'UserRule'.
diff --git a/src/Development/Shake/Internal/Progress.hs b/src/Development/Shake/Internal/Progress.hs
index c04801f8..3b2b9668 100644
--- a/src/Development/Shake/Internal/Progress.hs
+++ b/src/Development/Shake/Internal/Progress.hs
@@ -28,6 +28,7 @@ import General.Template
 import System.IO.Unsafe
 import Paths_shake
 import System.Time.Extra
+import Data.Semigroup (Semigroup (..))
 import Data.Monoid
 import Prelude

@@ -66,10 +67,8 @@ data Progress = Progress
     ,timeTodo :: {-# UNPACK #-} !(Double,Int) -- ^ Time spent building 'countTodo' rules in previous runs, plus the number which have no known time (have never been built before).
     }
     deriving (Eq,Ord,Show,Read,Data,Typeable)
-
-instance Monoid Progress where
-    mempty = Progress Nothing 0 0 0 0 0 0 0 (0,0)
-    mappend a b = Progress
+instance Semigroup Progress where
+    a <> b = Progress
         {isFailure = isFailure a `mplus` isFailure b
         ,countSkipped = countSkipped a + countSkipped b
         ,countBuilt = countBuilt a + countBuilt b
@@ -84,6 +83,10 @@ instance Monoid Progress where
         }


+instance Monoid Progress where
+    mempty = Progress Nothing 0 0 0 0 0 0 0 (0,0)
+    mappend = (<>)
+
 ---------------------------------------------------------------------
 -- MEALY TYPE - for writing the progress functions
 -- See <http://hackage.haskell.org/package/machines-0.2.3.1/docs/Data-Machine-Mealy.html>
diff --git a/src/General/Bilist.hs b/src/General/Bilist.hs
index bf80be26..c9ed3042 100755
--- a/src/General/Bilist.hs
+++ b/src/General/Bilist.hs
@@ -4,6 +4,7 @@ module General.Bilist(
     Bilist, cons, snoc, uncons, toList, isEmpty
     ) where

+import Data.Semigroup (Semigroup(..))
 import Data.Monoid
 import Prelude

@@ -19,9 +20,12 @@ isEmpty (Bilist as bs) = null as && null bs
 instance Eq a => Eq (Bilist a) where
     a == b = toList a == toList b

+instance Semigroup (Bilist a) where
+    a <> b = Bilist (toList a ++ toList b) []
+
 instance Monoid (Bilist a) where
     mempty = Bilist [] []
-    mappend a b = Bilist (toList a ++ toList b) []
+    mappend = (<>)

 cons :: a -> Bilist a -> Bilist a
 cons x (Bilist as bs) = Bilist (x:as) bs
diff --git a/src/General/Binary.hs b/src/General/Binary.hs
index 37f2e85c..c4aafa33 100644
--- a/src/General/Binary.hs
+++ b/src/General/Binary.hs
@@ -22,6 +22,7 @@ import qualified Data.ByteString.Unsafe as BS
 import qualified Data.ByteString.Lazy as LBS
 import qualified Data.ByteString.UTF8 as UTF8
 import Data.Functor
+import Data.Semigroup (Semigroup (..))
 import Data.Monoid
 import Prelude

@@ -68,10 +69,12 @@ sizeBuilder (Builder i _) = i
 runBuilder :: Builder -> BS.ByteString
 runBuilder (Builder i f) = unsafePerformIO $ BS.create i $ \ptr -> f ptr 0

+instance Semigroup Builder where
+    (Builder x1 x2) <> (Builder y1 y2) = Builder (x1+y1) $ \p i -> do x2 p i; y2 p $ i+x1
+
 instance Monoid Builder where
     mempty = Builder 0 $ \_ _ -> return ()
-    mappend (Builder x1 x2) (Builder y1 y2) = Builder (x1+y1) $ \p i -> do x2 p i; y2 p $ i+x1
-
+    mappend = (<>)

 -- | Methods for Binary serialisation that go directly between strict ByteString values.
 --   When the Database is read each key/value will be loaded as a separate ByteString,
diff --git a/src/General/ListBuilder.hs b/src/General/ListBuilder.hs
index 70dcf32a..f20b6764 100755
--- a/src/General/ListBuilder.hs
+++ b/src/General/ListBuilder.hs
@@ -3,6 +3,7 @@ module General.ListBuilder(
     ListBuilder, runListBuilder, newListBuilder
     ) where

+import Data.Semigroup (Semigroup (..))
 import Data.Monoid
 import Prelude()

@@ -11,11 +12,15 @@ data ListBuilder a
     | One a
     | Add (ListBuilder a) (ListBuilder a)

+
+instance Semigroup (ListBuilder a) where
+    Zero <> x = x
+    x <> Zero = x
+    x <> y = Add x y
+
 instance Monoid (ListBuilder a) where
     mempty = Zero
-    mappend Zero x = x
-    mappend x Zero = x
-    mappend x y = Add x y
+    mappend = (<>)

 newListBuilder :: a -> ListBuilder a
 newListBuilder = One

From 739db1edfa61f1ec28702d259ac0e2156f36e066 Mon Sep 17 00:00:00 2001
From: Moritz Angermann <moritz.angermann@gmail.com>
Date: Wed, 22 Nov 2017 10:41:57 +0800
Subject: [PATCH 2/5] Adds semigroups dependencie for ghc < 8.0

---
 shake.cabal | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/shake.cabal b/shake.cabal
index ca5fcdd3..f7227977 100644
--- a/shake.cabal
+++ b/shake.cabal
@@ -106,6 +106,9 @@ library
     if !os(windows)
         build-depends: unix

+    if !impl(ghc >= 8.0)
+        build-depends: semigroups == 0.18.*
+
     exposed-modules:
         Development.Shake
         Development.Shake.Classes

From 327451953ea994b33e6f429eee254ca04ab243ab Mon Sep 17 00:00:00 2001
From: Moritz Angermann <moritz.angermann@gmail.com>
Date: Wed, 22 Nov 2017 10:59:46 +0800
Subject: [PATCH 3/5] Hide (<>) from Monoid.

It's exported from Semigroup already.
---
 src/Development/Shake/Internal/Core/Rules.hs | 2 +-
 src/Development/Shake/Internal/Progress.hs   | 2 +-
 src/General/Bilist.hs                        | 2 +-
 src/General/Binary.hs                        | 2 +-
 src/General/ListBuilder.hs                   | 2 +-
 5 files changed, 5 insertions(+), 5 deletions(-)

diff --git a/src/Development/Shake/Internal/Core/Rules.hs b/src/Development/Shake/Internal/Core/Rules.hs
index f52031b3..1455a45f 100644
--- a/src/Development/Shake/Internal/Core/Rules.hs
+++ b/src/Development/Shake/Internal/Core/Rules.hs
@@ -29,7 +29,7 @@ import Data.Maybe
 import System.IO.Extra
 import System.IO.Unsafe
 import Data.Semigroup (Semigroup (..))
-import Data.Monoid
+import Data.Monoid hiding ((<>))
 import qualified Data.ByteString.Lazy as LBS
 import qualified Data.Binary.Builder as Bin
 import Data.Binary.Put
diff --git a/src/Development/Shake/Internal/Progress.hs b/src/Development/Shake/Internal/Progress.hs
index 3b2b9668..b4b9d664 100644
--- a/src/Development/Shake/Internal/Progress.hs
+++ b/src/Development/Shake/Internal/Progress.hs
@@ -29,7 +29,7 @@ import System.IO.Unsafe
 import Paths_shake
 import System.Time.Extra
 import Data.Semigroup (Semigroup (..))
-import Data.Monoid
+import Data.Monoid hiding ((<>))
 import Prelude

 #ifdef mingw32_HOST_OS
diff --git a/src/General/Bilist.hs b/src/General/Bilist.hs
index c9ed3042..eb2dd767 100755
--- a/src/General/Bilist.hs
+++ b/src/General/Bilist.hs
@@ -5,7 +5,7 @@ module General.Bilist(
     ) where

 import Data.Semigroup (Semigroup(..))
-import Data.Monoid
+import Data.Monoid hiding ((<>))
 import Prelude


diff --git a/src/General/Binary.hs b/src/General/Binary.hs
index c4aafa33..4ed0a227 100644
--- a/src/General/Binary.hs
+++ b/src/General/Binary.hs
@@ -23,7 +23,7 @@ import qualified Data.ByteString.Lazy as LBS
 import qualified Data.ByteString.UTF8 as UTF8
 import Data.Functor
 import Data.Semigroup (Semigroup (..))
-import Data.Monoid
+import Data.Monoid hiding ((<>))
 import Prelude


diff --git a/src/General/ListBuilder.hs b/src/General/ListBuilder.hs
index f20b6764..2952a45d 100755
--- a/src/General/ListBuilder.hs
+++ b/src/General/ListBuilder.hs
@@ -4,7 +4,7 @@ module General.ListBuilder(
     ) where

 import Data.Semigroup (Semigroup (..))
-import Data.Monoid
+import Data.Monoid hiding ((<>))
 import Prelude()

 data ListBuilder a

From baf2700432d2694c408a57435382f987b9454c43 Mon Sep 17 00:00:00 2001
From: Moritz Angermann <moritz.angermann@gmail.com>
Date: Wed, 22 Nov 2017 11:09:29 +0800
Subject: [PATCH 4/5] Adds semigroup build dependency to all targets.

---
 shake.cabal | 6 ++++++
 1 file changed, 6 insertions(+)

diff --git a/shake.cabal b/shake.cabal
index f7227977..eb85d6bf 100644
--- a/shake.cabal
+++ b/shake.cabal
@@ -210,6 +210,9 @@ executable shake
     if !os(windows)
         build-depends: unix

+    if !impl(ghc >= 8.0)
+        build-depends: semigroups == 0.18.*
+
     other-modules:
         Development.Ninja.All
         Development.Ninja.Env
@@ -313,6 +316,9 @@ test-suite shake-test
     if !os(windows)
         build-depends: unix

+    if !impl(ghc >= 8.0)
+        build-depends: semigroups == 0.18.*
+
     other-modules:
         Development.Ninja.All
         Development.Ninja.Env

From 79aad7aafe4504344b384a5a6d97c596c5fd73e0 Mon Sep 17 00:00:00 2001
From: Moritz Angermann <moritz.angermann@gmail.com>
Date: Wed, 22 Nov 2017 11:29:52 +0800
Subject: [PATCH 5/5] Adds semigrou constraint

---
 src/Development/Shake/Internal/Core/Rules.hs | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/Development/Shake/Internal/Core/Rules.hs b/src/Development/Shake/Internal/Core/Rules.hs
index 1455a45f..88c665f9 100644
--- a/src/Development/Shake/Internal/Core/Rules.hs
+++ b/src/Development/Shake/Internal/Core/Rules.hs
@@ -119,7 +119,7 @@ instance Monoid SRules where
 instance Semigroup a => Semigroup (Rules a) where
     (<>) = liftA2 (<>)

-instance Monoid a => Monoid (Rules a) where
+instance (Semigroup a, Monoid a) => Monoid (Rules a) where
     mempty = return mempty
     mappend = (<>)

