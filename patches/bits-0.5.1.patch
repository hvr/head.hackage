commit 09e95ef0cb130b91b66240b11def6d019813c3bd
Author: Ryan Scott <ryan.gl.scott@gmail.com>
Date:   Sat Mar 16 08:45:47 2019 -0400

    Adapt to base-4.13.0.0

diff --git a/src/Data/Bits/Coding.hs b/src/Data/Bits/Coding.hs
index 700c118..833b41e 100644
--- a/src/Data/Bits/Coding.hs
+++ b/src/Data/Bits/Coding.hs
@@ -26,6 +26,7 @@ module Data.Bits.Coding
 
 import Control.Applicative
 import Control.Monad
+import qualified Control.Monad.Fail as Fail
 import Control.Monad.State.Class
 import Control.Monad.Reader.Class
 import Control.Monad.Trans
@@ -60,8 +61,14 @@ instance Monad m => Monad (Coding m) where
   {-# INLINE return #-}
   Coding m >>= f = Coding $ \ k -> m $ \a -> runCoding (f a) k
   {-# INLINE (>>=) #-}
+#if !(MIN_VERSION_base(4,13,0))
   fail e = Coding $ \_ _ _ -> fail e
   {-# INLINE fail #-}
+#endif
+
+instance Fail.MonadFail m => Fail.MonadFail (Coding m) where
+  fail e = Coding $ \_ _ _ -> Fail.fail e
+  {-# INLINE fail #-}
 
 -- Binary.Get is strangely missing MonadPlus
 instance (Monad m, Alternative m) => Alternative (Coding m) where
