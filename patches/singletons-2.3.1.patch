diff -ru singletons-2.3.1.orig/src/Data/Singletons/Partition.hs singletons-2.3.1/src/Data/Singletons/Partition.hs
--- singletons-2.3.1.orig/src/Data/Singletons/Partition.hs	2017-07-31 09:27:02.000000000 -0400
+++ singletons-2.3.1/src/Data/Singletons/Partition.hs	2017-11-09 09:40:25.529886917 -0500
@@ -37,10 +37,12 @@
         , pd_data_decs :: [DataDecl]
         }
 
+instance Semigroup PartitionedDecs where
+  PDecs a1 b1 c1 d1 <> PDecs a2 b2 c2 d2 =
+    PDecs (a1 <> a2) (b1 <> b2) (c1 <> c2) (d1 <> d2)
+
 instance Monoid PartitionedDecs where
   mempty = PDecs [] [] [] []
-  mappend (PDecs a1 b1 c1 d1) (PDecs a2 b2 c2 d2) =
-    PDecs (a1 <> a2) (b1 <> b2) (c1 <> c2) (d1 <> d2)
 
 -- | Split up a @[DDec]@ into its pieces, extracting 'Ord' instances
 -- from deriving clauses
diff -ru singletons-2.3.1.orig/src/Data/Singletons/Promote/Monad.hs singletons-2.3.1/src/Data/Singletons/Promote/Monad.hs
--- singletons-2.3.1.orig/src/Data/Singletons/Promote/Monad.hs	2017-07-31 09:27:02.000000000 -0400
+++ singletons-2.3.1/src/Data/Singletons/Promote/Monad.hs	2017-11-09 09:39:11.073885042 -0500
@@ -46,7 +46,7 @@
 newtype PrM a = PrM (ReaderT PrEnv (WriterT [DDec] Q) a)
   deriving ( Functor, Applicative, Monad, Quasi
            , MonadReader PrEnv, MonadWriter [DDec]
-           , MonadFail )
+           , MonadFail, MonadIO )
 
 instance DsMonad PrM where
   localDeclarations = asks pr_local_decls
diff -ru singletons-2.3.1.orig/src/Data/Singletons/Single/Monad.hs singletons-2.3.1/src/Data/Singletons/Single/Monad.hs
--- singletons-2.3.1.orig/src/Data/Singletons/Single/Monad.hs	2017-07-31 09:27:02.000000000 -0400
+++ singletons-2.3.1/src/Data/Singletons/Single/Monad.hs	2017-11-09 09:39:33.501885607 -0500
@@ -46,7 +46,7 @@
 newtype SgM a = SgM (ReaderT SgEnv (WriterT [DDec] Q) a)
   deriving ( Functor, Applicative, Monad
            , MonadReader SgEnv, MonadWriter [DDec]
-           , MonadFail )
+           , MonadFail, MonadIO )
 
 liftSgM :: Q a -> SgM a
 liftSgM = SgM . lift . lift
diff -ru singletons-2.3.1.orig/src/Data/Singletons/Syntax.hs singletons-2.3.1/src/Data/Singletons/Syntax.hs
--- singletons-2.3.1.orig/src/Data/Singletons/Syntax.hs	2017-07-31 09:27:02.000000000 -0400
+++ singletons-2.3.1/src/Data/Singletons/Syntax.hs	2017-11-09 09:38:02.461883314 -0500
@@ -99,10 +99,12 @@
 type ALetDecEnv = LetDecEnv Annotated
 type ULetDecEnv = LetDecEnv Unannotated
 
+instance Semigroup ULetDecEnv where
+  LetDecEnv defns1 types1 infx1 _ <> LetDecEnv defns2 types2 infx2 _  =
+    LetDecEnv (defns1 <> defns2) (types1 <> types2) (infx1 <> infx2) ()
+
 instance Monoid ULetDecEnv where
   mempty = LetDecEnv Map.empty Map.empty [] ()
-  mappend (LetDecEnv defns1 types1 infx1 _) (LetDecEnv defns2 types2 infx2 _) =
-    LetDecEnv (defns1 <> defns2) (types1 <> types2) (infx1 <> infx2) ()
 
 valueBinding :: Name -> ULetDecRHS -> ULetDecEnv
 valueBinding n v = emptyLetDecEnv { lde_defns = Map.singleton n v }
diff -ru singletons-2.3.1.orig/src/Data/Singletons/TypeRepStar.hs singletons-2.3.1/src/Data/Singletons/TypeRepStar.hs
--- singletons-2.3.1.orig/src/Data/Singletons/TypeRepStar.hs	2017-07-31 09:27:02.000000000 -0400
+++ singletons-2.3.1/src/Data/Singletons/TypeRepStar.hs	2017-11-09 10:06:22.245926121 -0500
@@ -39,7 +39,6 @@
 import Data.Kind
 import GHC.Exts ( Proxy# )
 import Data.Type.Coercion
-import Data.Type.Equality
 
 data instance Sing (a :: *) where
   STypeRep :: Typeable a => Sing a
@@ -52,7 +51,11 @@
   toSing = dirty_mk_STypeRep
 
 instance PEq Type where
-  type (a :: *) :== (b :: *) = a == b
+  type (a :: *) :== (b :: *) = EqType a b
+
+type family EqType (a :: Type) (b :: Type) where
+  EqType a a = 'True
+  EqType a b = 'False
 
 instance SEq Type where
   (STypeRep :: Sing a) %:== (STypeRep :: Sing b) =
diff -ru singletons-2.3.1.orig/src/Data/Singletons/Util.hs singletons-2.3.1/src/Data/Singletons/Util.hs
--- singletons-2.3.1.orig/src/Data/Singletons/Util.hs	2017-07-31 09:27:02.000000000 -0400
+++ singletons-2.3.1/src/Data/Singletons/Util.hs	2017-11-09 09:38:50.957884536 -0500
@@ -353,7 +353,7 @@
 newtype QWithAux m q a = QWA { runQWA :: WriterT m q a }
   deriving ( Functor, Applicative, Monad, MonadTrans
            , MonadWriter m, MonadReader r
-           , MonadFail )
+           , MonadFail, MonadIO )
 
 -- make a Quasi instance for easy lifting
 instance (Quasi q, Monoid m) => Quasi (QWithAux m q) where
