diff -ru acid-state-0.14.3.orig/src-unix/FileIO.hs acid-state-0.14.3/src-unix/FileIO.hs
--- acid-state-0.14.3.orig/src-unix/FileIO.hs	2017-07-19 19:07:28.000000000 -0400
+++ acid-state-0.14.3/src-unix/FileIO.hs	2018-05-11 18:05:21.828635970 -0400
@@ -1,3 +1,4 @@
+{-# LANGUAGE CPP #-}
 {-# LANGUAGE ForeignFunctionInterface #-}
 module FileIO(FHandle,open,write,flush,close,obtainPrefixLock,releasePrefixLock,PrefixLock) where
 import System.Posix(Fd(Fd),
@@ -7,6 +8,9 @@
                     closeFd,
                     OpenMode(WriteOnly,ReadWrite),
                     exclusive, trunc,
+#if MIN_VERSION_unix(2,8,0)
+                    creat,
+#endif
                     defaultFileFlags,
                     stdFileMode
                    )
@@ -30,7 +34,12 @@
 
 -- should handle opening flags correctly
 open :: FilePath -> IO FHandle
-open filename = fmap FHandle $ openFd filename WriteOnly (Just stdFileMode) defaultFileFlags
+open filename = fmap FHandle $ openFd filename WriteOnly
+#if MIN_VERSION_unix(2,8,0)
+                                      defaultFileFlags {creat = Just stdFileMode}
+#else
+                                      (Just stdFileMode) defaultFileFlags
+#endif
 
 write :: FHandle -> Ptr Word8 -> Word32 -> IO Word32
 write (FHandle fd) data' length = fmap fromIntegral $ fdWriteBuf fd data' $ fromIntegral length
@@ -118,7 +127,13 @@
 takeLock :: FilePath -> IO PrefixLock
 takeLock fp = do
   createDirectoryIfMissing True (takeDirectory fp)
-  h <- openFd fp ReadWrite (Just 0o600) (defaultFileFlags {exclusive = True, trunc = True}) >>= fdToHandle
+  h <- openFd fp ReadWrite
+#if MIN_VERSION_unix(2,8,0)
+              defaultFileFlags {exclusive = True, trunc = True, creat = Just 0o600}
+#else
+              (Just 0o600) (defaultFileFlags {exclusive = True, trunc = True})
+#endif
+              >>= fdToHandle
   pid <- getProcessID
   hPutStrLn h (show pid) >> hClose h
   -- Read back our own lock and make sure its still ours
