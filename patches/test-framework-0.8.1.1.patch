diff -ru test-framework-0.8.1.1.orig/Test/Framework/Options.hs test-framework-0.8.1.1/Test/Framework/Options.hs
--- test-framework-0.8.1.1.orig/Test/Framework/Options.hs	2015-01-09 05:04:37.000000000 +0100
+++ test-framework-0.8.1.1/Test/Framework/Options.hs	2017-09-15 16:18:00.255689874 +0200
@@ -4,7 +4,7 @@
 import Test.Framework.Utilities
 
 import Data.Monoid
-
+import Data.Semigroup (Semigroup(..))
 
 type TestOptions = TestOptions' Maybe
 type CompleteTestOptions = TestOptions' K
@@ -23,6 +23,17 @@
         -- ^ The number of microseconds to run tests for before considering them a failure
     }
 
+instance Semigroup (TestOptions' Maybe) where
+    to1 <> to2 = TestOptions {
+            topt_seed = getLast (mappendBy (Last . topt_seed) to1 to2),
+            topt_maximum_generated_tests = getLast (mappendBy (Last . topt_maximum_generated_tests) to1 to2),
+            topt_maximum_unsuitable_generated_tests = getLast (mappendBy (Last . topt_maximum_unsuitable_generated_tests) to1 to2),
+            topt_maximum_test_size = getLast (mappendBy (Last . topt_maximum_test_size) to1 to2),
+            topt_maximum_test_depth = getLast (mappendBy (Last . topt_maximum_test_depth) to1 to2),
+            topt_timeout = getLast (mappendBy (Last . topt_timeout) to1 to2)
+        }
+
+
 instance Monoid (TestOptions' Maybe) where
     mempty = TestOptions {
             topt_seed = Nothing,
@@ -32,12 +43,4 @@
             topt_maximum_test_depth = Nothing,
             topt_timeout = Nothing
         }
-    
-    mappend to1 to2 = TestOptions {
-            topt_seed = getLast (mappendBy (Last . topt_seed) to1 to2),
-            topt_maximum_generated_tests = getLast (mappendBy (Last . topt_maximum_generated_tests) to1 to2),
-            topt_maximum_unsuitable_generated_tests = getLast (mappendBy (Last . topt_maximum_unsuitable_generated_tests) to1 to2),
-            topt_maximum_test_size = getLast (mappendBy (Last . topt_maximum_test_size) to1 to2),
-            topt_maximum_test_depth = getLast (mappendBy (Last . topt_maximum_test_depth) to1 to2),
-            topt_timeout = getLast (mappendBy (Last . topt_timeout) to1 to2)
-        }
+    mappend = (<>)
Only in test-framework-0.8.1.1/Test/Framework: Options.hs~
diff -ru test-framework-0.8.1.1.orig/Test/Framework/Runners/Options.hs test-framework-0.8.1.1/Test/Framework/Runners/Options.hs
--- test-framework-0.8.1.1.orig/Test/Framework/Runners/Options.hs	2015-01-09 05:04:37.000000000 +0100
+++ test-framework-0.8.1.1/Test/Framework/Runners/Options.hs	2017-09-15 16:19:59.846945047 +0200
@@ -8,6 +8,7 @@
 import Test.Framework.Runners.TestPattern
 
 import Data.Monoid
+import Data.Semigroup (Semigroup(..))
 
 data ColorMode = ColorAuto | ColorNever | ColorAlways
 
@@ -24,6 +25,18 @@
         ropt_list_only  :: f Bool
     }
 
+instance Semigroup (RunnerOptions' Maybe) where
+    ro1 <> ro2 = RunnerOptions {
+            ropt_threads = getLast (mappendBy (Last . ropt_threads) ro1 ro2),
+            ropt_test_options = mappendBy ropt_test_options ro1 ro2,
+            ropt_test_patterns = mappendBy ropt_test_patterns ro1 ro2,
+            ropt_xml_output = mappendBy ropt_xml_output ro1 ro2,
+            ropt_xml_nested = getLast (mappendBy (Last . ropt_xml_nested) ro1 ro2),
+            ropt_color_mode = getLast (mappendBy (Last . ropt_color_mode) ro1 ro2),
+            ropt_hide_successes = getLast (mappendBy (Last . ropt_hide_successes) ro1 ro2),
+            ropt_list_only      = getLast (mappendBy (Last . ropt_list_only)      ro1 ro2)
+        }
+
 instance Monoid (RunnerOptions' Maybe) where
     mempty = RunnerOptions {
             ropt_threads = Nothing,
@@ -36,13 +49,4 @@
             ropt_list_only      = Nothing
         }
 
-    mappend ro1 ro2 = RunnerOptions {
-            ropt_threads = getLast (mappendBy (Last . ropt_threads) ro1 ro2),
-            ropt_test_options = mappendBy ropt_test_options ro1 ro2,
-            ropt_test_patterns = mappendBy ropt_test_patterns ro1 ro2,
-            ropt_xml_output = mappendBy ropt_xml_output ro1 ro2,
-            ropt_xml_nested = getLast (mappendBy (Last . ropt_xml_nested) ro1 ro2),
-            ropt_color_mode = getLast (mappendBy (Last . ropt_color_mode) ro1 ro2),
-            ropt_hide_successes = getLast (mappendBy (Last . ropt_hide_successes) ro1 ro2),
-            ropt_list_only      = getLast (mappendBy (Last . ropt_list_only)      ro1 ro2)
-        }
+    mappend = (<>)
Only in test-framework-0.8.1.1/Test/Framework/Runners: Options.hs~
diff -ru test-framework-0.8.1.1.orig/Test/Framework/Runners/Statistics.hs test-framework-0.8.1.1/Test/Framework/Runners/Statistics.hs
--- test-framework-0.8.1.1.orig/Test/Framework/Runners/Statistics.hs	2015-01-09 05:04:37.000000000 +0100
+++ test-framework-0.8.1.1/Test/Framework/Runners/Statistics.hs	2017-09-15 16:21:06.214531462 +0200
@@ -11,7 +11,7 @@
 import Data.Map (Map)
 import qualified Data.Map as Map
 import Data.Monoid
-
+import Data.Semigroup (Semigroup(..))
 
 -- | Records a count of the various kinds of test that have been run
 newtype TestCount = TestCount { unTestCount :: Map TestTypeName Int }
@@ -30,9 +30,12 @@
 testCountTotal :: TestCount -> Int
 testCountTotal = sum . Map.elems . unTestCount
 
+instance Semigroup TestCount where
+    (TestCount tcm1) <> (TestCount tcm2) = TestCount $ Map.unionWith (+) tcm1 tcm2
+
 instance Monoid TestCount where
     mempty = TestCount $ Map.empty
-    mappend (TestCount tcm1) (TestCount tcm2) = TestCount $ Map.unionWith (+) tcm1 tcm2
+    mappend = (<>)
 
 minusTestCount :: TestCount -> TestCount -> TestCount
 minusTestCount (TestCount tcm1) (TestCount tcm2) = TestCount $ Map.unionWith (-) tcm1 tcm2
@@ -48,9 +51,12 @@
         ts_failed_tests :: TestCount
     }
 
+instance Semigroup TestStatistics where
+    (TestStatistics tot1 run1 pas1 fai1) <> (TestStatistics tot2 run2 pas2 fai2) = TestStatistics (tot1 `mappend` tot2) (run1 `mappend` run2) (pas1 `mappend` pas2) (fai1 `mappend` fai2)
+
 instance Monoid TestStatistics where
     mempty = TestStatistics mempty mempty mempty mempty
-    mappend (TestStatistics tot1 run1 pas1 fai1) (TestStatistics tot2 run2 pas2 fai2) = TestStatistics (tot1 `mappend` tot2) (run1 `mappend` run2) (pas1 `mappend` pas2) (fai1 `mappend` fai2)
+    mappend = (<>)
 
 ts_pending_tests :: TestStatistics -> TestCount
 ts_pending_tests ts = ts_total_tests ts `minusTestCount` ts_run_tests ts
Only in test-framework-0.8.1.1/Test/Framework/Runners: Statistics.hs~
diff -ru test-framework-0.8.1.1.orig/test-framework.cabal test-framework-0.8.1.1/test-framework.cabal
--- test-framework-0.8.1.1.orig/test-framework.cabal	2015-01-09 05:04:37.000000000 +0100
+++ test-framework-0.8.1.1/test-framework.cabal	2017-09-15 16:16:42.372174637 +0200
@@ -1,104 +1,106 @@
-Name:                test-framework
-Version:             0.8.1.1
-Cabal-Version:       >= 1.6
-Category:            Testing
-Synopsis:            Framework for running and organising tests, with HUnit and QuickCheck support
-Description:         Allows tests such as QuickCheck properties and HUnit test cases to be assembled into test groups, run in
-                     parallel (but reported in deterministic order, to aid diff interpretation) and filtered and controlled by
-                     command line options. All of this comes with colored test output, progress reporting and test statistics output.
-License:             BSD3
-License-File:        LICENSE
-Author:              Max Bolingbroke <batterseapower@hotmail.com>
-Maintainer:          Libraries List <libraries@haskell.org>
-Homepage:            https://batterseapower.github.io/test-framework/
-Bug-Reports:         https://github.com/haskell/test-framework/issues/
-Build-Type:          Simple
-
-Flag Tests
-        Description:    Build the tests
-        Default:        False
-
-
-Library
-        Exposed-Modules:        Test.Framework
-                                Test.Framework.Options
-                                Test.Framework.Providers.API
-                                Test.Framework.Runners.Console
-                                Test.Framework.Runners.Options
-                                Test.Framework.Runners.TestPattern
-                                Test.Framework.Runners.API
-                                Test.Framework.Seed
-
-        Other-Modules:          Test.Framework.Core
-                                Test.Framework.Improving
-                                Test.Framework.Runners.Console.Colors
-                                Test.Framework.Runners.Console.ProgressBar
-                                Test.Framework.Runners.Console.Run
-                                Test.Framework.Runners.Console.Statistics
-                                Test.Framework.Runners.Console.Table
-                                Test.Framework.Runners.Console.Utilities
-                                Test.Framework.Runners.Core
-                                Test.Framework.Runners.Processors
-                                Test.Framework.Runners.Statistics
-                                Test.Framework.Runners.ThreadPool
-                                Test.Framework.Runners.TimedConsumption
-                                Test.Framework.Runners.XML.JUnitWriter
-                                Test.Framework.Runners.XML
-                                Test.Framework.Utilities
-
-        Build-Depends:          ansi-terminal >= 0.4.0, ansi-wl-pprint >= 0.5.1,
-                                base >= 4.3 && < 5, random >= 1.0, containers >= 0.1,
-                                regex-posix >= 0.72,
-                                old-locale >= 1.0,
-                                time >= 1.1.2 && < 1.6,
-                                xml >= 1.3.5, hostname >= 1.0
-
-        Extensions:             CPP
-                                PatternGuards
-                                ExistentialQuantification
-                                RecursiveDo
-                                FlexibleInstances
-                                TypeSynonymInstances
-                                TypeOperators
-                                FunctionalDependencies
-                                MultiParamTypeClasses
-
-        Ghc-Options:            -Wall
-
-        if impl(ghc)
-                Cpp-Options:            -DCOMPILER_GHC
-
-Executable test-framework-tests
-        Main-Is:                Test/Framework/Tests.hs
-
-        if !flag(tests)
-                Buildable:              False
-        else
-                Build-Depends:          HUnit >= 1.2, QuickCheck >= 2.3 && < 2.5,
-                                        base >= 4.3 && < 5, random >= 1.0, containers >= 0.1,
-                                        ansi-terminal >= 0.4.0, ansi-wl-pprint >= 0.5.1,
-                                        regex-posix >= 0.72,
-                                        old-locale >= 1.0, time >= 1.1.2,
-                                        xml >= 1.3.5, hostname >= 1.0,
-                                        libxml >= 0.1.1, bytestring >= 0.9
-
-                Extensions:             CPP
-                                        PatternGuards
-                                        ExistentialQuantification
-                                        RecursiveDo
-                                        FlexibleInstances
-                                        TypeSynonymInstances
-                                        TypeOperators
-                                        FunctionalDependencies
-                                        MultiParamTypeClasses
-
-                Cpp-Options:            -DTEST
-
-                Ghc-Options:            -Wall -threaded
-
-                if impl(ghc)
-                        Cpp-Options:            -DCOMPILER_GHC
-
-Source-Repository head
-  Type:     git
-  Location: https://github.com/haskell/test-framework
+Name:                test-framework
+Version:             0.8.1.1
+x-revision: 2
+Cabal-Version:       >= 1.6
+Category:            Testing
+Synopsis:            Framework for running and organising tests, with HUnit and QuickCheck support
+Description:         Allows tests such as QuickCheck properties and HUnit test cases to be assembled into test groups, run in
+                     parallel (but reported in deterministic order, to aid diff interpretation) and filtered and controlled by
+                     command line options. All of this comes with colored test output, progress reporting and test statistics output.
+License:             BSD3
+License-File:        LICENSE
+Author:              Max Bolingbroke <batterseapower@hotmail.com>
+Maintainer:          Libraries List <libraries@haskell.org>
+Homepage:            https://batterseapower.github.io/test-framework/
+Bug-Reports:         https://github.com/haskell/test-framework/issues/
+Build-Type:          Simple
+
+Flag Tests
+        Description:    Build the tests
+        Default:        False
+        Manual:         True
+
+
+Library
+        Exposed-Modules:        Test.Framework
+                                Test.Framework.Options
+                                Test.Framework.Providers.API
+                                Test.Framework.Runners.Console
+                                Test.Framework.Runners.Options
+                                Test.Framework.Runners.TestPattern
+                                Test.Framework.Runners.API
+                                Test.Framework.Seed
+
+        Other-Modules:          Test.Framework.Core
+                                Test.Framework.Improving
+                                Test.Framework.Runners.Console.Colors
+                                Test.Framework.Runners.Console.ProgressBar
+                                Test.Framework.Runners.Console.Run
+                                Test.Framework.Runners.Console.Statistics
+                                Test.Framework.Runners.Console.Table
+                                Test.Framework.Runners.Console.Utilities
+                                Test.Framework.Runners.Core
+                                Test.Framework.Runners.Processors
+                                Test.Framework.Runners.Statistics
+                                Test.Framework.Runners.ThreadPool
+                                Test.Framework.Runners.TimedConsumption
+                                Test.Framework.Runners.XML.JUnitWriter
+                                Test.Framework.Runners.XML
+                                Test.Framework.Utilities
+
+        Build-Depends:          ansi-terminal >= 0.4.0, ansi-wl-pprint >= 0.5.1,
+                                base >= 4.3 && < 5, random >= 1.0 && < 2, containers >= 0.1,
+                                regex-posix >= 0.72,
+                                old-locale == 1.0.*,
+                                time >= 1.1.2 && < 1.9,
+                                xml >= 1.3.5, hostname >= 1.0
+
+        Extensions:             CPP
+                                PatternGuards
+                                ExistentialQuantification
+                                RecursiveDo
+                                FlexibleInstances
+                                TypeSynonymInstances
+                                TypeOperators
+                                FunctionalDependencies
+                                MultiParamTypeClasses
+
+        Ghc-Options:            -Wall
+
+        if impl(ghc)
+                Cpp-Options:            -DCOMPILER_GHC
+
+Executable test-framework-tests
+        Main-Is:                Test/Framework/Tests.hs
+
+        if !flag(tests)
+                Buildable:              False
+        else
+                Build-Depends:          HUnit >= 1.2, QuickCheck >= 2.3 && < 2.5,
+                                        base >= 4.3 && < 5, random >= 1.0, containers >= 0.1,
+                                        ansi-terminal >= 0.4.0, ansi-wl-pprint >= 0.5.1,
+                                        regex-posix >= 0.72,
+                                        old-locale >= 1.0, time >= 1.1.2,
+                                        xml >= 1.3.5, hostname >= 1.0,
+                                        libxml >= 0.1.1, bytestring >= 0.9
+
+                Extensions:             CPP
+                                        PatternGuards
+                                        ExistentialQuantification
+                                        RecursiveDo
+                                        FlexibleInstances
+                                        TypeSynonymInstances
+                                        TypeOperators
+                                        FunctionalDependencies
+                                        MultiParamTypeClasses
+
+                Cpp-Options:            -DTEST
+
+                Ghc-Options:            -Wall -threaded
+
+                if impl(ghc)
+                        Cpp-Options:            -DCOMPILER_GHC
+
+Source-Repository head
+  Type:     git
+  Location: https://github.com/haskell/test-framework
