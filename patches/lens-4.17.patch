commit c047d22db63f5d7ed32bd0252c59c6615d6d6a63
Author: Ryan Scott <ryan.gl.scott@gmail.com>
Date:   Thu Feb 21 07:06:00 2019 -0500

    Allow building with GHC 8.9

diff --git a/src/Control/Lens/Equality.hs b/src/Control/Lens/Equality.hs
index c4f1f9f1..c186b3ed 100644
--- a/src/Control/Lens/Equality.hs
+++ b/src/Control/Lens/Equality.hs
@@ -73,7 +73,13 @@ substEq l = case runEq l of
 
 -- | We can use 'Equality' to do substitution into anything.
 #if __GLASGOW_HASKELL__ >= 706
-mapEq :: forall (s :: k1) (t :: k2) (a :: k1) (b :: k2) (f :: k1 -> *) . AnEquality s t a b -> f s -> f a
+# if __GLASGOW_HASKELL__ >= 809
+#  define KVS(kvs) kvs
+# else
+#  define KVS(kvs)
+# endif
+
+mapEq :: forall KVS(k1 k2) (s :: k1) (t :: k2) (a :: k1) (b :: k2) (f :: k1 -> *) . AnEquality s t a b -> f s -> f a
 #else
 mapEq :: AnEquality s t a b -> f s -> f a
 #endif
diff --git a/tests/properties.hs b/tests/properties.hs
index 90e74f35..4bd53a2a 100644
--- a/tests/properties.hs
+++ b/tests/properties.hs
@@ -123,12 +123,18 @@ sampleExtremePoly f foo = f foo
 samplePolyEquality :: Equality Monad Identity Monad Identity
 samplePolyEquality f = f
 
-lessSimplePoly :: forall (s :: k1) (t :: k2) (a :: k1) (b :: k2) .
+# if __GLASGOW_HASKELL__ >= 809
+#  define KVS(kvs) kvs
+# else
+#  define KVS(kvs)
+# endif
+
+lessSimplePoly :: forall KVS(k1 k2) (s :: k1) (t :: k2) (a :: k1) (b :: k2) .
                   Equality a b a b
 lessSimplePoly f = f
 
 equalityAnEqualityPoly ::
-       forall (s :: k1) (t :: k2) (a :: k1) (b :: k2) .
+       forall KVS(k1 k2) (s :: k1) (t :: k2) (a :: k1) (b :: k2) .
        Equality s t a b -> AnEquality s t a b
 equalityAnEqualityPoly f = f
 #else

commit 9757e2808a7409651b7dfb274041ef69a6fac2ed
Author: Ryan Scott <ryan.gl.scott@gmail.com>
Date:   Thu Feb 21 06:57:55 2019 -0500

    Allow building with template-haskell-2.15.0.0

diff --git a/src/Control/Lens/Internal/TH.hs b/src/Control/Lens/Internal/TH.hs
index 6ea63da2..185e47ae 100644
--- a/src/Control/Lens/Internal/TH.hs
+++ b/src/Control/Lens/Internal/TH.hs
@@ -46,7 +46,9 @@ import Paths_lens (version)
 
 -- | Compatibility shim for recent changes to template haskell's 'tySynInstD'
 tySynInstD' :: Name -> [TypeQ] -> TypeQ -> DecQ
-#if MIN_VERSION_template_haskell(2,9,0)
+#if MIN_VERSION_template_haskell(2,15,0)
+tySynInstD' fam ts r = tySynInstD (tySynEqn Nothing (foldl appT (conT fam) ts) r)
+#elif MIN_VERSION_template_haskell(2,9,0)
 tySynInstD' fam ts r = tySynInstD fam (tySynEqn ts r)
 #else
 tySynInstD' = tySynInstD
diff --git a/src/Control/Lens/TH.hs b/src/Control/Lens/TH.hs
index dc7cead1..eff0a99b 100644
--- a/src/Control/Lens/TH.hs
+++ b/src/Control/Lens/TH.hs
@@ -512,11 +512,16 @@ makeDataDecl dec = case deNewtype dec of
     , fullType = apps $ ConT tyName
     , constructors = cons
     }
+#if MIN_VERSION_template_haskell(2,15,0)
+  DataInstD ctx _ fnArgs _ cons _
+#else
   DataInstD ctx familyName args
 #if MIN_VERSION_template_haskell(2,11,0)
             _
 #endif
-            cons _ -> Just DataDecl
+            cons _
+#endif
+                   -> Just DataDecl
     { dataContext = ctx
     , tyConName = Nothing
     , dataParameters = map PlainTV vars
@@ -533,8 +538,23 @@ makeDataDecl dec = case deNewtype dec of
       --
       -- has 2 type parameters: a and b.
       vars = toList $ setOf typeVars args
+
+#if MIN_VERSION_template_haskell(2,15,0)
+      (familyName, args) =
+        case unAppsT fnArgs of
+          (ConT familyName', args') -> (familyName', args')
+          (_, _) -> error $ "Illegal data instance LHS: " ++ pprint fnArgs
+#endif
   _ -> Nothing
 
+#if MIN_VERSION_template_haskell(2,15,0)
+unAppsT :: Type -> (Type, [Type])
+unAppsT = go []
+  where
+    go xs (AppT l x) = go (x : xs) l
+    go xs ty = (ty, xs)
+#endif
+
 -- | A data, newtype, data instance or newtype instance declaration.
 data DataDecl = DataDecl
   { dataContext :: Cxt -- ^ Datatype context.
diff --git a/src/Language/Haskell/TH/Lens.hs b/src/Language/Haskell/TH/Lens.hs
index 9d1b0c88..9a7dbe18 100644
--- a/src/Language/Haskell/TH/Lens.hs
+++ b/src/Language/Haskell/TH/Lens.hs
@@ -4,6 +4,10 @@
 #endif
 {-# LANGUAGE Rank2Types #-}
 
+#if MIN_VERSION_template_haskell(2,15,0)
+{-# LANGUAGE PatternGuards #-}
+#endif
+
 #if __GLASGOW_HASKELL__ >= 800
 {-# OPTIONS_GHC -Wno-trustworthy-safe #-}
 #endif
@@ -492,8 +496,14 @@ instance HasTypes Foreign where
 
 #if MIN_VERSION_template_haskell(2,9,0)
 instance HasTypes TySynEqn where
+# if MIN_VERSION_template_haskell(2,15,0)
+  types f (TySynEqn mtvbs lhs rhs) = TySynEqn mtvbs
+                                         <$> types f lhs
+                                         <*> types f rhs
+# else
   types f (TySynEqn lhss rhs) = TySynEqn <$> traverse (types f) lhss
                                          <*> types f rhs
+# endif
 #endif
 
 instance HasTypes t => HasTypes [t] where
@@ -1015,8 +1025,16 @@ _TySynInstD :: Prism' Dec (Name, TySynEqn)
 _TySynInstD
   = prism' reviewer remitter
   where
+# if MIN_VERSION_template_haskell(2,15,0)
+      reviewer (_x, y)
+        = TySynInstD y
+      remitter (TySynInstD eqn@(TySynEqn _ lhs _))
+        | (ConT n, _) <- unAppsT lhs
+        = Just (n, eqn)
+# else
       reviewer (x, y) = TySynInstD x y
       remitter (TySynInstD x y) = Just (x, y)
+# endif
       remitter _ = Nothing
 
 _RoleAnnotD :: Prism' Dec (Name, [Role])
@@ -1110,16 +1128,32 @@ _DataInstD :: DataPrism' [Type] [Con]
 _DataInstD
   = prism' reviewer remitter
   where
+# if MIN_VERSION_template_haskell(2,15,0)
+      reviewer (x, y, z, w, u, v)
+        = DataInstD x Nothing (Prelude.foldl AppT (ConT y) z) w u v
+      remitter (DataInstD x y z w u v)
+        | (ConT n, ts) <- unAppsT z
+        = Just (x, n, ts, w, u, v)
+# else
       reviewer (x, y, z, w, u, v) = DataInstD x y z w u v
       remitter (DataInstD x y z w u v) = Just (x, y, z, w, u, v)
+# endif
       remitter _ = Nothing
 
 _NewtypeInstD :: DataPrism' [Type] Con
 _NewtypeInstD
   = prism' reviewer remitter
   where
+# if MIN_VERSION_template_haskell(2,15,0)
+      reviewer (x, y, z, w, u, v)
+        = NewtypeInstD x Nothing (Prelude.foldl AppT (ConT y) z) w u v
+      remitter (NewtypeInstD x _y z w u v)
+        | (ConT n, ts) <- unAppsT z
+        = Just (x, n, ts, w, u, v)
+# else
       reviewer (x, y, z, w, u, v) = NewtypeInstD x y z w u v
       remitter (NewtypeInstD x y z w u v) = Just (x, y, z, w, u, v)
+# endif
       remitter _ = Nothing
 
 _DataFamilyD :: Prism' Dec (Name, [TyVarBndr], Maybe Kind)
@@ -1546,8 +1580,16 @@ _RuleP :: Prism' Pragma (String, [RuleBndr], Exp, Exp, Phases)
 _RuleP
   = prism' reviewer remitter
   where
-      reviewer (x, y, z, w, u) = RuleP x y z w u
-      remitter (RuleP x y z w u) = Just (x, y, z, w, u)
+      reviewer (x, y, z, w, u) = RuleP x
+# if MIN_VERSION_template_haskell(2,15,0)
+                                         Nothing
+# endif
+                                         y z w u
+      remitter (RuleP x
+# if MIN_VERSION_template_haskell(2,15,0)
+                        _
+# endif
+                        y z w u) = Just (x, y, z, w, u)
       remitter _ = Nothing
 
 #if MIN_VERSION_template_haskell(2,9,0)
@@ -1715,13 +1757,35 @@ _DataFam
 #if MIN_VERSION_template_haskell(2,9,0)
 tySynEqnPatterns :: Lens' TySynEqn [Type]
 tySynEqnPatterns = lens g s where
+# if MIN_VERSION_template_haskell(2,15,0)
+   g (TySynEqn _     nxs _)    = xs
+     where
+       (_n, xs) = unAppsT nxs
+   s (TySynEqn mtvbs nxs y) xs = TySynEqn mtvbs (Prelude.foldl AppT n xs) y
+     where
+       (n, _xs) = unAppsT nxs
+# else
    g (TySynEqn xs _)    = xs
    s (TySynEqn _  y) xs = TySynEqn xs y
+# endif
 
 tySynEqnResult :: Lens' TySynEqn Type
 tySynEqnResult = lens g s where
+# if MIN_VERSION_template_haskell(2,15,0)
+   g (TySynEqn _     _  x) = x
+   s (TySynEqn mtvbs xs _) = TySynEqn mtvbs xs
+# else
    g (TySynEqn _  x) = x
    s (TySynEqn xs _) = TySynEqn xs
+# endif
+#endif
+
+#if MIN_VERSION_template_haskell(2,15,0)
+unAppsT :: Type -> (Type, [Type])
+unAppsT = go []
+  where
+    go xs (AppT l x) = go (x : xs) l
+    go xs ty = (ty, xs)
 #endif
 
 _InfixL :: Prism' FixityDirection ()
