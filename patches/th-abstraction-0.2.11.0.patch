commit 9202973e260ce73e956df629e4949c9312d59855
Author: Ryan Scott <ryan.gl.scott@gmail.com>
Date:   Fri Mar 1 20:25:11 2019 -0500

    Allow building with template-haskell-2.15.0.0

diff --git a/src/Language/Haskell/TH/Datatype.hs b/src/Language/Haskell/TH/Datatype.hs
index 926d82c..b07e697 100644
--- a/src/Language/Haskell/TH/Datatype.hs
+++ b/src/Language/Haskell/TH/Datatype.hs
@@ -525,7 +525,17 @@ repairDataFam
     DataInstD cx n (repairVarKindsWith' dvars ts) cons deriv
 #else
 repairDataFam famD instD
-# if MIN_VERSION_template_haskell(2,11,0)
+# if MIN_VERSION_template_haskell(2,15,0)
+      | DataFamilyD _ dvars _ <- famD
+      , NewtypeInstD cx mtvbs nameApp k c deriv <- instD
+      , ConT n :| ts <- decomposeType nameApp
+      = NewtypeInstD cx mtvbs (foldl' AppT (ConT n) (repairVarKindsWith dvars ts)) k c deriv
+
+      | DataFamilyD _ dvars _ <- famD
+      , DataInstD cx mtvbs nameApp k c deriv <- instD
+      , ConT n :| ts <- decomposeType nameApp
+      = DataInstD cx mtvbs (foldl' AppT (ConT n) (repairVarKindsWith dvars ts)) k c deriv
+# elif MIN_VERSION_template_haskell(2,11,0)
       | DataFamilyD _ dvars _ <- famD
       , NewtypeInstD cx n ts k c deriv <- instD
       = NewtypeInstD cx n (repairVarKindsWith dvars ts) k c deriv
@@ -581,12 +591,27 @@ normalizeDecFor isReified dec =
       giveTypesStarKinds <$> normalizeDec' isReified context name (bndrParams tyvars) [con] Newtype
     DataD context name tyvars _kind cons _derives ->
       giveTypesStarKinds <$> normalizeDec' isReified context name (bndrParams tyvars) cons Datatype
+# if MIN_VERSION_template_haskell(2,15,0)
+    NewtypeInstD context _ nameApp _kind con _derives ->
+      case decomposeType nameApp of
+        ConT name :| params ->
+          repair13618' . giveTypesStarKinds =<<
+          normalizeDec' isReified context name params [con] NewtypeInstance
+        _ -> fail $ "Unexpected newtype instance head: " ++ pprint nameApp
+    DataInstD context _ nameApp _kind cons _derives ->
+      case decomposeType nameApp of
+        ConT name :| params ->
+          repair13618' . giveTypesStarKinds =<<
+          normalizeDec' isReified context name params cons DataInstance
+        _ -> fail $ "Unexpected data instance head: " ++ pprint nameApp
+# else
     NewtypeInstD context name params _kind con _derives ->
       repair13618' . giveTypesStarKinds =<<
       normalizeDec' isReified context name params [con] NewtypeInstance
     DataInstD context name params _kind cons _derives ->
       repair13618' . giveTypesStarKinds =<<
       normalizeDec' isReified context name params cons DataInstance
+# endif
 #elif MIN_VERSION_template_haskell(2,11,0)
     NewtypeD context name tyvars _kind con _derives ->
       giveTypesStarKinds <$> normalizeDec' isReified context name (bndrParams tyvars) [con] Newtype
@@ -1823,7 +1848,9 @@ tySynInstDCompat ::
   [TypeQ] {- ^ instance parameters -} ->
   TypeQ   {- ^ instance result     -} ->
   DecQ
-#if MIN_VERSION_template_haskell(2,9,0)
+#if MIN_VERSION_template_haskell(2,15,0)
+tySynInstDCompat n ps r = TySynInstD <$> (TySynEqn Nothing <$> foldl' appT (conT n) ps <*> r)
+#elif MIN_VERSION_template_haskell(2,9,0)
 tySynInstDCompat n ps r = TySynInstD n <$> (TySynEqn <$> sequence ps <*> r)
 #else
 tySynInstDCompat = tySynInstD
