diff -ru regex-base-0.93.2.orig/Text/Regex/Base/Context.hs regex-base-0.93.2/Text/Regex/Base/Context.hs
--- regex-base-0.93.2.orig/Text/Regex/Base/Context.hs	2010-06-11 18:57:49.000000000 -0400
+++ regex-base-0.93.2/Text/Regex/Base/Context.hs	2019-03-15 11:06:55.070138472 -0400
@@ -187,6 +187,7 @@
 module Text.Regex.Base.Context() where
 
 import Control.Monad(liftM)
+import qualified Control.Monad.Fail as Fail
 import Data.Array(Array,(!),elems,listArray)
 --  import Data.Maybe(maybe)
 import Text.Regex.Base.RegexLike(RegexLike(..),RegexContext(..)
@@ -244,29 +245,29 @@
 {-# INLINE nullArray #-}
 nullArray = listArray (1,0) []
 
-nullFail :: (RegexContext regex source (AllMatches [] target),Monad m) => regex -> source -> m (AllMatches [] target)
+nullFail :: (RegexContext regex source (AllMatches [] target),Fail.MonadFail m) => regex -> source -> m (AllMatches [] target)
 {-# INLINE nullFail #-}
 nullFail r s = case match r s of
                  (AllMatches []) -> regexFailed
                  xs -> return xs
 
-nullFailText :: (RegexContext regex source (AllTextMatches [] target),Monad m) => regex -> source -> m (AllTextMatches [] target)
+nullFailText :: (RegexContext regex source (AllTextMatches [] target),Fail.MonadFail m) => regex -> source -> m (AllTextMatches [] target)
 {-# INLINE nullFailText #-}
 nullFailText r s = case match r s of
                      (AllTextMatches []) -> regexFailed
                      xs -> return xs
 
-nullFail' :: (RegexContext regex source ([] target),Monad m) => regex -> source -> m ([] target)
+nullFail' :: (RegexContext regex source ([] target),Fail.MonadFail m) => regex -> source -> m ([] target)
 {-# INLINE nullFail' #-}
 nullFail' r s = case match r s of
                  ([]) -> regexFailed
                  xs -> return xs
 
-regexFailed :: (Monad m) => m b
+regexFailed :: (Fail.MonadFail m) => m b
 {-# INLINE regexFailed #-}
 regexFailed =  fail $ "regex failed to match"
 
-actOn :: (RegexLike r s,Monad m) => ((s,MatchText s,s)->t) -> r -> s -> m t
+actOn :: (RegexLike r s,Fail.MonadFail m) => ((s,MatchText s,s)->t) -> r -> s -> m t
 {-# INLINE actOn #-}
 actOn f r s = case matchOnceText r s of
     Nothing -> regexFailed
diff -ru regex-base-0.93.2.orig/Text/Regex/Base/Impl.hs regex-base-0.93.2/Text/Regex/Base/Impl.hs
--- regex-base-0.93.2.orig/Text/Regex/Base/Impl.hs	2010-06-11 18:57:49.000000000 -0400
+++ regex-base-0.93.2/Text/Regex/Base/Impl.hs	2019-03-15 11:07:31.634589571 -0400
@@ -35,13 +35,14 @@
 module Text.Regex.Base.Impl(polymatch,polymatchM) where
 
 import Text.Regex.Base
+import qualified Control.Monad.Fail as Fail
 import Data.Array((!))
 
-regexFailed :: (Monad m) => m b
+regexFailed :: (Fail.MonadFail m) => m b
 {-# INLINE regexFailed #-}
 regexFailed =  fail $ "regex failed to match"
 
-actOn :: (RegexLike r s,Monad m) => ((s,MatchText s,s)->t) -> r -> s -> m t
+actOn :: (RegexLike r s,Fail.MonadFail m) => ((s,MatchText s,s)->t) -> r -> s -> m t
 {-# INLINE actOn #-}
 actOn f r s = case matchOnceText r s of
     Nothing -> regexFailed
@@ -53,6 +54,6 @@
     Nothing -> empty
     Just (_,ma,_) -> fst (ma!0)
 
-polymatchM :: (RegexLike a b,Monad m) => a -> b -> m b
+polymatchM :: (RegexLike a b,Fail.MonadFail m) => a -> b -> m b
 {-# INLINE polymatchM #-}
 polymatchM =  actOn (\(_,ma,_)->fst (ma!0))
diff -ru regex-base-0.93.2.orig/Text/Regex/Base/RegexLike.hs regex-base-0.93.2/Text/Regex/Base/RegexLike.hs
--- regex-base-0.93.2.orig/Text/Regex/Base/RegexLike.hs	2010-06-11 18:57:49.000000000 -0400
+++ regex-base-0.93.2/Text/Regex/Base/RegexLike.hs	2019-03-15 11:15:28.404344877 -0400
@@ -39,6 +39,7 @@
   AllSubmatches(..),AllTextSubmatches(..),AllMatches(..),AllTextMatches(..)
   ) where
 
+import qualified Control.Monad.Fail as Fail
 import Data.Array(Array,(!))
 import Data.Maybe(isJust)
 import qualified Data.ByteString as B (take,drop,empty,ByteString)
@@ -102,9 +103,9 @@
   -- | Specify your own options
   makeRegexOpts :: compOpt -> execOpt -> source -> regex
   -- | make using the defaultCompOpt and defaultExecOpt, reporting errors with fail
-  makeRegexM :: (Monad m) => source -> m regex
+  makeRegexM :: (Fail.MonadFail m) => source -> m regex
   -- | Specify your own options, reporting errors with fail
-  makeRegexOptsM :: (Monad m) => compOpt -> execOpt -> source -> m regex
+  makeRegexOptsM :: (Fail.MonadFail m) => compOpt -> execOpt -> source -> m regex
 
   makeRegex = makeRegexOpts defaultCompOpt defaultExecOpt
   makeRegexM = makeRegexOptsM defaultCompOpt defaultExecOpt
@@ -189,7 +190,7 @@
 -- > ["b","c","d","f","g","h","j","k","l","m","n","p","q","r","s","t","v","w","x","y","z"]
 class (RegexLike regex source) => RegexContext regex source target where
   match :: regex -> source -> target
-  matchM :: (Monad m) => regex -> source -> m target
+  matchM :: (Fail.MonadFail m) => regex -> source -> m target
 
 ----------------
 -- | Extract allows for indexing operations on String or ByteString.
