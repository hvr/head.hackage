diff -ru haskell-src-exts-util-0.2.1.2.orig/haskell-src-exts-util.cabal haskell-src-exts-util-0.2.1.2/haskell-src-exts-util.cabal
--- haskell-src-exts-util-0.2.1.2.orig/haskell-src-exts-util.cabal	2018-01-06 17:14:37.088772378 -0500
+++ haskell-src-exts-util-0.2.1.2/haskell-src-exts-util.cabal	2018-01-06 17:17:23.304776564 -0500
@@ -27,6 +27,7 @@
     , containers
     , data-default
     , haskell-src-exts
+    , semigroups
     , transformers
     , uniplate
   exposed-modules:
diff -ru haskell-src-exts-util-0.2.1.2.orig/src/Language/Haskell/Exts/FreeVars.hs haskell-src-exts-util-0.2.1.2/src/Language/Haskell/Exts/FreeVars.hs
--- haskell-src-exts-util-0.2.1.2.orig/src/Language/Haskell/Exts/FreeVars.hs	2017-08-25 15:48:57.000000000 -0400
+++ haskell-src-exts-util-0.2.1.2/src/Language/Haskell/Exts/FreeVars.hs	2018-01-06 17:18:25.852778139 -0500
@@ -1,3 +1,4 @@
+{-# LANGUAGE CPP                 #-}
 {-# LANGUAGE FlexibleContexts    #-}
 {-# LANGUAGE FlexibleInstances   #-}
 {-# LANGUAGE ScopedTypeVariables #-}
@@ -16,6 +17,7 @@
 import           Data.Data
 import           Data.Generics.Uniplate.Data
 import           Data.Monoid (Monoid(..))
+import           Data.Semigroup (Semigroup(..))
 import           Data.Set                      (Set)
 import qualified Data.Set                      as Set
 import           Language.Haskell.Exts
@@ -28,9 +30,14 @@
 
 data Vars = Vars {bound :: Set (Name ()), free :: Set (Name ())}
 
+instance Semigroup Vars where
+    Vars x1 x2 <> Vars y1 y2 = Vars (x1 ^+ y1) (x2 ^+ y2)
+
 instance Monoid Vars where
     mempty = Vars Set.empty Set.empty
+#if !(MIN_VERSION_base(4,11,0))
     mappend (Vars x1 x2) (Vars y1 y2) = Vars (x1 ^+ y1) (x2 ^+ y2)
+#endif
     mconcat fvs = Vars (Set.unions $ map bound fvs) (Set.unions $ map free fvs)
 
 class AllVars a where
