diff --git a/Test/Tasty/CmdLine.hs b/Test/Tasty/CmdLine.hs
index fffe9a3..d2e1913 100644
--- a/Test/Tasty/CmdLine.hs
+++ b/Test/Tasty/CmdLine.hs
@@ -39,7 +39,7 @@ import Test.Tasty.Runners.Reducers
 
 -- | Generate a command line parser from a list of option descriptions
 optionParser :: [OptionDescription] -> Parser OptionSet
-optionParser = getApp . foldMap toSet where
+optionParser = getAp . foldMap toSet where
   toSet :: OptionDescription -> Ap Parser OptionSet
   toSet (Option (Proxy :: Proxy v)) = Ap $
     (singleOption <$> (optionCLParser :: Parser v)) <|> pure mempty
diff --git a/Test/Tasty/Ingredients/ConsoleReporter.hs b/Test/Tasty/Ingredients/ConsoleReporter.hs
index e2f5b96..ede39f4 100644
--- a/Test/Tasty/Ingredients/ConsoleReporter.hs
+++ b/Test/Tasty/Ingredients/ConsoleReporter.hs
@@ -138,11 +138,11 @@ buildTestOutput opts tree =
       level <- ask
       let
         printHeading = printf "%s%s\n" (indent level) name
-        printBody = runReader (getApp grp) (level + 1)
+        printBody = runReader (getAp grp) (level + 1)
       return $ PrintHeading name printHeading printBody
 
   in
-    flip runReader 0 $ getApp $
+    flip runReader 0 $ getAp $
       foldTestTree
         trivialFold
           { foldSingle = runSingleTest
@@ -166,7 +166,7 @@ foldTestOutput
   -> StatusMap -- ^ The @StatusMap@ received by the 'TestReporter'
   -> b
 foldTestOutput foldTest foldHeading outputTree smap =
-  flip evalState 0 $ getApp $ go outputTree where
+  flip evalState 0 $ getAp $ go outputTree where
   go (PrintTest name printName printResult) = Ap $ do
     ix <- get
     put $! ix + 1
@@ -177,7 +177,7 @@ foldTestOutput foldTest foldHeading outputTree smap =
       readStatusVar = getResultFromTVar statusVar
     return $ foldTest name printName readStatusVar printResult
   go (PrintHeading name printName printBody) = Ap $
-    foldHeading name printName <$> getApp (go printBody)
+    foldHeading name printName <$> getAp (go printBody)
   go (Seq a b) = mappend (go a) (go b)
   go Skip = mempty
 
@@ -205,7 +205,7 @@ consoleOutput toutput smap =
 
 consoleOutputHidingSuccesses :: (?colors :: Bool) => TestOutput -> StatusMap -> IO ()
 consoleOutputHidingSuccesses toutput smap =
-  void . getApp $ foldTestOutput foldTest foldHeading toutput smap
+  void . getAp $ foldTestOutput foldTest foldHeading toutput smap
   where
     foldTest _name printName getResult printResult =
       Ap $ do
@@ -218,7 +218,7 @@ consoleOutputHidingSuccesses toutput smap =
     foldHeading _name printHeading printBody =
       Ap $ do
         printHeading :: IO ()
-        Any failed <- getApp printBody
+        Any failed <- getAp printBody
         unless failed clearAboveLine
         return $ Any failed
 
@@ -227,7 +227,7 @@ consoleOutputHidingSuccesses toutput smap =
 
 streamOutputHidingSuccesses :: (?colors :: Bool) => TestOutput -> StatusMap -> IO ()
 streamOutputHidingSuccesses toutput smap =
-  void . flip evalStateT [] . getApp $
+  void . flip evalStateT [] . getAp $
     foldTestOutput foldTest foldHeading toutput smap
   where
     foldTest _name printName getResult printResult =
@@ -249,7 +249,7 @@ streamOutputHidingSuccesses toutput smap =
     foldHeading _name printHeading printBody =
       Ap $ do
         modify (printHeading :)
-        Any failed <- getApp printBody
+        Any failed <- getAp printBody
         unless failed $
           modify $ \stack ->
             case stack of
@@ -284,7 +284,7 @@ instance Semigroup Statistics where
 #endif
 
 computeStatistics :: StatusMap -> IO Statistics
-computeStatistics = getApp . foldMap (\var -> Ap $
+computeStatistics = getAp . foldMap (\var -> Ap $
   (\r -> Statistics 1 (if resultSuccessful r then 0 else 1))
     <$> getResultFromTVar var)
 
diff --git a/Test/Tasty/Options/Env.hs b/Test/Tasty/Options/Env.hs
index 2a4b202..edb847b 100644
--- a/Test/Tasty/Options/Env.hs
+++ b/Test/Tasty/Options/Env.hs
@@ -35,7 +35,7 @@ instance Exception EnvOptionException
 
 -- | Search the environment for given options
 getEnvOptions :: [OptionDescription] -> IO OptionSet
-getEnvOptions = getApp . foldMap lookupOpt
+getEnvOptions = getAp . foldMap lookupOpt
   where
     lookupOpt :: OptionDescription -> Ap IO OptionSet
     lookupOpt (Option (px :: Proxy v)) = do
diff --git a/Test/Tasty/Runners/Reducers.hs b/Test/Tasty/Runners/Reducers.hs
index 8616887..340aaf4 100644
--- a/Test/Tasty/Runners/Reducers.hs
+++ b/Test/Tasty/Runners/Reducers.hs
@@ -39,7 +39,10 @@ POSSIBILITY OF SUCH DAMAGE.
 
 {-# LANGUAGE GeneralizedNewtypeDeriving #-}
 
-module Test.Tasty.Runners.Reducers where
+module Test.Tasty.Runners.Reducers
+    ( module Test.Tasty.Runners.Reducers
+    , Ap(..)
+    ) where
 
 import Data.Monoid
 import Control.Applicative
@@ -59,8 +62,10 @@ instance Applicative f => Semigroup (Traversal f) where
   (<>) = mappend
 #endif
 
+-- Provided by GHC 8.6.1
+#if !MIN_VERSION_base(4,12,0)
 -- | Monoid generated by @'liftA2' ('<>')@
-newtype Ap f a = Ap { getApp :: f a }
+newtype Ap f a = Ap { getAp :: f a }
   deriving (Functor, Applicative, Monad)
 instance (Applicative f, Monoid a) => Monoid (Ap f a) where
   mempty = pure mempty
@@ -69,3 +74,4 @@ instance (Applicative f, Monoid a) => Monoid (Ap f a) where
 instance (Applicative f, Monoid a) => Semigroup (Ap f a) where
   (<>) = mappend
 #endif
+#endif
